
Serial_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca4  08004ca4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cac  08004cac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08004d24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004d24  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afda  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e40  00000000  00000000  0002b07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025360  00000000  00000000  0002e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b738  00000000  00000000  000536a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7eb7  00000000  00000000  0005ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  00146ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014a200  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014a224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004b00 	.word	0x08004b00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004b00 	.word	0x08004b00

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <CalcCRC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data[17];
uint16_t CalcCRC(uint8_t *data_t, uint16_t length)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80005d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d4:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < length; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	e024      	b.n	8000626 <CalcCRC+0x62>
	{
		temp = temp ^ data[i];
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <CalcCRC+0x90>)
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	4053      	eors	r3, r2
 80005ea:	61fb      	str	r3, [r7, #28]
		for(int j = 0; j < length; j++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e012      	b.n	8000618 <CalcCRC+0x54>
		{
			flag = temp & 0x0001;
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
			temp >>= 1;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	085b      	lsrs	r3, r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
			if(flag)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <CalcCRC+0x4e>
				temp ^= 0xA001;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800060c:	f083 0301 	eor.w	r3, r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
		for(int j = 0; j < length; j++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbe8      	blt.n	80005f2 <CalcCRC+0x2e>
	for(int i = 0; i < length; i++)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	69ba      	ldr	r2, [r7, #24]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbd6      	blt.n	80005dc <CalcCRC+0x18>
		}
	}
	// reverse byte order.
	temp2 = temp >> 8;
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	613b      	str	r3, [r7, #16]
	temp = (temp << 8) | temp2;
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	4313      	orrs	r3, r2
 800063c:	61fb      	str	r3, [r7, #28]
	temp &= 0xFFFF;
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	b29b      	uxth	r3, r3
 8000642:	61fb      	str	r3, [r7, #28]
	return temp;
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b29b      	uxth	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	3724      	adds	r7, #36	; 0x24
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000011c 	.word	0x2000011c

08000658 <initRandomArray>:

//tao 1 mang random 12 phan tu
void initRandomArray(uint8_t *A, int n, uint8_t k) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]
    srand(time(NULL));
 8000666:	2000      	movs	r0, #0
 8000668:	f003 fa1a 	bl	8003aa0 <time>
 800066c:	4602      	mov	r2, r0
 800066e:	460b      	mov	r3, r1
 8000670:	4610      	mov	r0, r2
 8000672:	4619      	mov	r1, r3
 8000674:	f003 f9a8 	bl	80039c8 <srand>
    uint8_t randNum = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	74fb      	strb	r3, [r7, #19]
    for (int i = 0; i < n; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e01b      	b.n	80006ba <initRandomArray+0x62>
        randNum = 48 + rand() % k;
 8000682:	f003 f9cf 	bl	8003a24 <rand>
 8000686:	4602      	mov	r2, r0
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	fb92 f1f3 	sdiv	r1, r2, r3
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3330      	adds	r3, #48	; 0x30
 8000698:	74fb      	strb	r3, [r7, #19]
        A[i] = randNum;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	7cfa      	ldrb	r2, [r7, #19]
 80006a2:	701a      	strb	r2, [r3, #0]
        printf("%d\n", A[i]);
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <initRandomArray+0x74>)
 80006b0:	f003 f972 	bl	8003998 <iprintf>
    for (int i = 0; i < n; i++) {
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbdf      	blt.n	8000682 <initRandomArray+0x2a>
    }
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08004b18 	.word	0x08004b18

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fae6 	bl	8000ca6 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t arrayRandom[12];
  uint8_t k = 78;
 80006da:	234e      	movs	r3, #78	; 0x4e
 80006dc:	74fb      	strb	r3, [r7, #19]
  int count = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  initRandomArray(arrayRandom, sizeof(arrayRandom), k);
 80006e2:	7cfa      	ldrb	r2, [r7, #19]
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	210c      	movs	r1, #12
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffb5 	bl	8000658 <initRandomArray>
  // truyen gia tri cho data
  data[0] = 0x42;		// byte 0, 1: header
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <main+0x10c>)
 80006f0:	2242      	movs	r2, #66	; 0x42
 80006f2:	701a      	strb	r2, [r3, #0]
  data[1] = 0x4C;
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <main+0x10c>)
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	705a      	strb	r2, [r3, #1]
  data[2] = 0x0C;		// byte 2, 3: byte CMD
 80006fa:	4b38      	ldr	r3, [pc, #224]	; (80007dc <main+0x10c>)
 80006fc:	220c      	movs	r2, #12
 80006fe:	709a      	strb	r2, [r3, #2]
  for(int i = 0; i < sizeof(arrayRandom); i++)
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	e00a      	b.n	800071c <main+0x4c>
  {
	  data[i + 3] = arrayRandom[i];
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	3303      	adds	r3, #3
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	440a      	add	r2, r1
 8000710:	7811      	ldrb	r1, [r2, #0]
 8000712:	4a32      	ldr	r2, [pc, #200]	; (80007dc <main+0x10c>)
 8000714:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < sizeof(arrayRandom); i++)
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	3301      	adds	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	2b0b      	cmp	r3, #11
 8000720:	d9f1      	bls.n	8000706 <main+0x36>
  }
  data[15] = CalcCRC(data, 15) >> 8;		// byte 15: CRC
 8000722:	210f      	movs	r1, #15
 8000724:	482d      	ldr	r0, [pc, #180]	; (80007dc <main+0x10c>)
 8000726:	f7ff ff4d 	bl	80005c4 <CalcCRC>
 800072a:	4603      	mov	r3, r0
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <main+0x10c>)
 8000734:	73da      	strb	r2, [r3, #15]
  data[16] = CalcCRC(data, 15);
 8000736:	210f      	movs	r1, #15
 8000738:	4828      	ldr	r0, [pc, #160]	; (80007dc <main+0x10c>)
 800073a:	f7ff ff43 	bl	80005c4 <CalcCRC>
 800073e:	4603      	mov	r3, r0
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <main+0x10c>)
 8000744:	741a      	strb	r2, [r3, #16]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f84d 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f8eb 	bl	8000924 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800074e:	f000 f89f 	bl	8000890 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 // initRandomArray(arrayRandom, sizeof(arrayRandom), k);
	  HAL_UART_Transmit_IT(&hlpuart1, data, sizeof(data));
 8000752:	2211      	movs	r2, #17
 8000754:	4921      	ldr	r1, [pc, #132]	; (80007dc <main+0x10c>)
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <main+0x110>)
 8000758:	f001 ff10 	bl	800257c <HAL_UART_Transmit_IT>
	  count++;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	3301      	adds	r3, #1
 8000760:	61fb      	str	r3, [r7, #28]
	  if(count > 10)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	2b0a      	cmp	r3, #10
 8000766:	dd33      	ble.n	80007d0 <main+0x100>
	  {
		  initRandomArray(arrayRandom, sizeof(arrayRandom), k);
 8000768:	7cfa      	ldrb	r2, [r7, #19]
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	210c      	movs	r1, #12
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff72 	bl	8000658 <initRandomArray>
		  data[0] = 0x42;		// byte 0, 1: header
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0x10c>)
 8000776:	2242      	movs	r2, #66	; 0x42
 8000778:	701a      	strb	r2, [r3, #0]
		  data[1] = 0x4C;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0x10c>)
 800077c:	224c      	movs	r2, #76	; 0x4c
 800077e:	705a      	strb	r2, [r3, #1]
		  data[2] = 0x0C;		// byte 2, 3: byte CMD
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <main+0x10c>)
 8000782:	220c      	movs	r2, #12
 8000784:	709a      	strb	r2, [r3, #2]
		  for(int i = 0; i < sizeof(arrayRandom); i++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e00a      	b.n	80007a2 <main+0xd2>
		  {
			  data[i + 3] = arrayRandom[i];
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3303      	adds	r3, #3
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	440a      	add	r2, r1
 8000796:	7811      	ldrb	r1, [r2, #0]
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <main+0x10c>)
 800079a:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < sizeof(arrayRandom); i++)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	2b0b      	cmp	r3, #11
 80007a6:	d9f1      	bls.n	800078c <main+0xbc>
		  }
		  data[15] = CalcCRC(data, 15) >> 8;		// byte 15: CRC
 80007a8:	210f      	movs	r1, #15
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <main+0x10c>)
 80007ac:	f7ff ff0a 	bl	80005c4 <CalcCRC>
 80007b0:	4603      	mov	r3, r0
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <main+0x10c>)
 80007ba:	73da      	strb	r2, [r3, #15]
		  data[16] = CalcCRC(data, 15);
 80007bc:	210f      	movs	r1, #15
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <main+0x10c>)
 80007c0:	f7ff ff00 	bl	80005c4 <CalcCRC>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <main+0x10c>)
 80007ca:	741a      	strb	r2, [r3, #16]
		  count = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_Delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f000 fad8 	bl	8000d88 <HAL_Delay>
	  HAL_UART_Transmit_IT(&hlpuart1, data, sizeof(data));
 80007d8:	e7bb      	b.n	8000752 <main+0x82>
 80007da:	bf00      	nop
 80007dc:	2000011c 	.word	0x2000011c
 80007e0:	2000008c 	.word	0x2000008c

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0a8      	sub	sp, #160	; 0xa0
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007ee:	2238      	movs	r2, #56	; 0x38
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 f8c8 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2254      	movs	r2, #84	; 0x54
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 f8ba 	bl	8003988 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000818:	f000 fe2a 	bl	8001470 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000824:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fecf 	bl	80015d8 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000840:	f000 f888 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2301      	movs	r3, #1
 800084a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f9d2 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800086a:	f000 f873 	bl	8000954 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800086e:	2320      	movs	r3, #32
 8000870:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fbe1 	bl	8002040 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000884:	f000 f866 	bl	8000954 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	37a0      	adds	r7, #160	; 0xa0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 8000898:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 800089c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008d4:	f001 fe02 	bl	80024dc <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f839 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008e6:	f002 ff5b 	bl	80037a0 <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008f0:	f000 f830 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 80008f8:	f002 ff90 	bl	800381c <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000902:	f000 f827 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_LPUART1_UART_Init+0x8c>)
 8000908:	f002 ff11 	bl	800372e <HAL_UARTEx_DisableFifoMode>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000912:	f000 f81f 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000008c 	.word	0x2000008c
 8000920:	40008000 	.word	0x40008000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_GPIO_Init+0x2c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <MX_GPIO_Init+0x2c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_GPIO_Init+0x2c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000996:	f000 fe0f 	bl	80015b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d130      	bne.n	8000a2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fba8 	bl	800116c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	205b      	movs	r0, #91	; 0x5b
 8000a22:	f000 faae 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a26:	205b      	movs	r0, #91	; 0x5b
 8000a28:	f000 fac5 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40008000 	.word	0x40008000
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f960 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <LPUART1_IRQHandler+0x10>)
 8000a96:	f001 fdf5 	bl	8002684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_kill>:

int _kill(int pid, int sig)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000abe:	f002 ff39 	bl	8003934 <__errno>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2216      	movs	r2, #22
 8000ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_exit>:

void _exit (int status)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ffe7 	bl	8000ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ae6:	e7fe      	b.n	8000ae6 <_exit+0x12>

08000ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00a      	b.n	8000b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000afa:	f3af 8000 	nop.w
 8000afe:	4601      	mov	r1, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf0      	blt.n	8000afa <_read+0x12>
	}

return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e009      	b.n	8000b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf1      	blt.n	8000b34 <_write+0x12>
	}
	return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fe9e 	bl	8003934 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20020000 	.word	0x20020000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000130 	.word	0x20000130
 8000c2c:	20000148 	.word	0x20000148

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 fe5d 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fd23 	bl	80006d0 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c98:	08004cb4 	.word	0x08004cb4
  ldr r2, =_sbss
 8000c9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca0:	20000148 	.word	0x20000148

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f95b 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fe4a 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d022      	beq.n	8000d32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_InitTick+0x6c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f966 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10f      	bne.n	8000d2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d809      	bhi.n	8000d26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	f000 f932 	bl	8000f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x70>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000134 	.word	0x20000134
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000134 	.word	0x20000134

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d004      	beq.n	8000dac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_Delay+0x40>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dac:	bf00      	nop
 8000dae:	f7ff ffdf 	bl	8000d70 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d8f7      	bhi.n	8000dae <HAL_Delay+0x26>
  {
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff40 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff90 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5f 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff33 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa4 	bl	8000f28 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d005      	beq.n	800100e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2204      	movs	r2, #4
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e037      	b.n	800107e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 020e 	bic.w	r2, r2, #14
 800101c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800102c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f003 021f 	and.w	r2, r3, #31
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800105a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001072:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800107c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d00d      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e047      	b.n	8001160 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020e 	bic.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800111c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001134:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800113e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
    }
  }
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800117a:	e15a      	b.n	8001432 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 814c 	beq.w	800142c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d00b      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0xea>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b12      	cmp	r3, #18
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80a6 	beq.w	800142c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6613      	str	r3, [r2, #96]	; 0x60
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f8:	4a56      	ldr	r2, [pc, #344]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001322:	d01f      	beq.n	8001364 <HAL_GPIO_Init+0x1f8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d019      	beq.n	8001360 <HAL_GPIO_Init+0x1f4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4b      	ldr	r2, [pc, #300]	; (800145c <HAL_GPIO_Init+0x2f0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1f0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4a      	ldr	r2, [pc, #296]	; (8001460 <HAL_GPIO_Init+0x2f4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1ec>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a49      	ldr	r2, [pc, #292]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a48      	ldr	r2, [pc, #288]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1e4>
 800134c:	2305      	movs	r3, #5
 800134e:	e00a      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 8001350:	2306      	movs	r3, #6
 8001352:	e008      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 8001354:	2304      	movs	r3, #4
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 8001358:	2303      	movs	r3, #3
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 800135c:	2302      	movs	r3, #2
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x1fa>
 8001364:	2300      	movs	r3, #0
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001376:	4937      	ldr	r1, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_GPIO_Init+0x300>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a8:	4a30      	ldr	r2, [pc, #192]	; (800146c <HAL_GPIO_Init+0x300>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <HAL_GPIO_Init+0x300>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_GPIO_Init+0x300>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_GPIO_Init+0x300>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <HAL_GPIO_Init+0x300>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_GPIO_Init+0x300>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_GPIO_Init+0x300>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f ae9d 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	48000400 	.word	0x48000400
 800145c:	48000800 	.word	0x48000800
 8001460:	48000c00 	.word	0x48000c00
 8001464:	48001000 	.word	0x48001000
 8001468:	48001400 	.word	0x48001400
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d141      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800147e:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148a:	d131      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800148c:	4b47      	ldr	r3, [pc, #284]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149c:	4b43      	ldr	r3, [pc, #268]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a4:	4a41      	ldr	r2, [pc, #260]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2232      	movs	r2, #50	; 0x32
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9b      	lsrs	r3, r3, #18
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c2:	e002      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d102      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f2      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	d158      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e057      	b.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001500:	e04d      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001508:	d141      	bne.n	800158e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001516:	d131      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001530:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2232      	movs	r2, #50	; 0x32
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800154e:	e002      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d102      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f2      	bne.n	8001550 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d112      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e011      	b.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800158c:	e007      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6093      	str	r3, [r2, #8]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40007000 	.word	0x40007000

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e306      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f6:	4b97      	ldr	r3, [pc, #604]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001600:	4b94      	ldr	r3, [pc, #592]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d102      	bne.n	8001616 <HAL_RCC_OscConfig+0x3e>
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d002      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	2b08      	cmp	r3, #8
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b8d      	ldr	r3, [pc, #564]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e2e1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a84      	ldr	r2, [pc, #528]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7e      	ldr	r2, [pc, #504]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b7c      	ldr	r3, [pc, #496]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7b      	ldr	r2, [pc, #492]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b78      	ldr	r3, [pc, #480]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a77      	ldr	r2, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a74      	ldr	r2, [pc, #464]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb6e 	bl	8000d70 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb6a 	bl	8000d70 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e2a6      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb5a 	bl	8000d70 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb56 	bl	8000d70 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e292      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d075      	beq.n	80017da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d102      	bne.n	800170e <HAL_RCC_OscConfig+0x136>
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d002      	beq.n	8001714 <HAL_RCC_OscConfig+0x13c>
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d11f      	bne.n	8001754 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x154>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e265      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4946      	ldr	r1, [pc, #280]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fac7 	bl	8000cd8 <HAL_InitTick>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d043      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e251      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb02 	bl	8000d70 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fafe 	bl	8000d70 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e23a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	061b      	lsls	r3, r3, #24
 800179c:	492d      	ldr	r1, [pc, #180]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
 80017a2:	e01a      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80017aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fade 	bl	8000d70 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fada 	bl	8000d70 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e216      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1e0>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d041      	beq.n	800186a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01c      	beq.n	8001828 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fab7 	bl	8000d70 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fab3 	bl	8000d70 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1ef      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ef      	beq.n	8001806 <HAL_RCC_OscConfig+0x22e>
 8001826:	e020      	b.n	800186a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fa9a 	bl	8000d70 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183e:	e00d      	b.n	800185c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fa96 	bl	8000d70 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d906      	bls.n	800185c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1d2      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185c:	4b8c      	ldr	r3, [pc, #560]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ea      	bne.n	8001840 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a6 	beq.w	80019c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x2b4>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x2b6>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a7e      	ldr	r2, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_OscConfig+0x4bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ba:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0x4bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a75      	ldr	r2, [pc, #468]	; (8001a94 <HAL_RCC_OscConfig+0x4bc>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa53 	bl	8000d70 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fa4f 	bl	8000d70 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e18b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <HAL_RCC_OscConfig+0x4bc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d108      	bne.n	8001906 <HAL_RCC_OscConfig+0x32e>
 80018f4:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a65      	ldr	r2, [pc, #404]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	e024      	b.n	8001950 <HAL_RCC_OscConfig+0x378>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d110      	bne.n	8001930 <HAL_RCC_OscConfig+0x358>
 800190e:	4b60      	ldr	r3, [pc, #384]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001924:	4a5a      	ldr	r2, [pc, #360]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x378>
 8001930:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d016      	beq.n	8001986 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff fa0a 	bl	8000d70 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff fa06 	bl	8000d70 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e140      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ed      	beq.n	8001960 <HAL_RCC_OscConfig+0x388>
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff f9f3 	bl	8000d70 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f9ef 	bl	8000d70 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e129      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ed      	bne.n	800198e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a34      	ldr	r2, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d03c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f9c2 	bl	8000d70 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f0:	f7ff f9be 	bl	8000d70 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0fa      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ef      	beq.n	80019f0 <HAL_RCC_OscConfig+0x418>
 8001a10:	e01b      	b.n	8001a4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff f9a5 	bl	8000d70 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a2a:	f7ff f9a1 	bl	8000d70 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0dd      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ef      	bne.n	8001a2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80d1 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	f000 808b 	beq.w	8001b78 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d15e      	bne.n	8001b28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f97b 	bl	8000d70 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	e00c      	b.n	8001a98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f977 	bl	8000d70 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d905      	bls.n	8001a98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0b3      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_RCC_OscConfig+0x62c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6a11      	ldr	r1, [r2, #32]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001abe:	0212      	lsls	r2, r2, #8
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	0552      	lsls	r2, r2, #21
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ad2:	0852      	lsrs	r2, r2, #1
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0652      	lsls	r2, r2, #25
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ade:	06d2      	lsls	r2, r2, #27
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4947      	ldr	r1, [pc, #284]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f936 	bl	8000d70 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f932 	bl	8000d70 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e06e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x530>
 8001b26:	e066      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a34      	ldr	r2, [pc, #208]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a2e      	ldr	r2, [pc, #184]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f90e 	bl	8000d70 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f90a 	bl	8000d70 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e046      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x580>
 8001b76:	e03e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e039      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d12c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d123      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d11b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d113      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	3b01      	subs	r3, #1
 8001bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	019f800c 	.word	0x019f800c

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e11e      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b8e      	ldr	r3, [pc, #568]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	498c      	ldr	r1, [pc, #560]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e106      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d073      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d129      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0f4      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c74:	f000 f99e 	bl	8001fb4 <RCC_GetSysClockFreqFromPLLSource>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a7c      	ldr	r2, [pc, #496]	; (8001e70 <HAL_RCC_ClockConfig+0x268>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d93f      	bls.n	8001d02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c82:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d033      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d12f      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001caa:	4a70      	ldr	r2, [pc, #448]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e024      	b.n	8001d02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0c6      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0be      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ce0:	f000 f8ce 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4a61      	ldr	r2, [pc, #388]	; (8001e70 <HAL_RCC_ClockConfig+0x268>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d909      	bls.n	8001d02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf6:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4957      	ldr	r1, [pc, #348]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d14:	f7ff f82c 	bl	8000d70 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f828 	bl	8000d70 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e095      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d023      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4936      	ldr	r1, [pc, #216]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
 8001d96:	e008      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b80      	cmp	r3, #128	; 0x80
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4a32      	ldr	r2, [pc, #200]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001da8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d21d      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 020f 	bic.w	r2, r3, #15
 8001dc0:	4929      	ldr	r1, [pc, #164]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc8:	f7fe ffd2 	bl	8000d70 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe ffce 	bl	8000d70 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e03b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x260>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ed      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4917      	ldr	r1, [pc, #92]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490f      	ldr	r1, [pc, #60]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e32:	f000 f825 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <HAL_RCC_ClockConfig+0x26c>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x270>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff3e 	bl	8000cd8 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	04c4b400 	.word	0x04c4b400
 8001e74:	08004b1c 	.word	0x08004b1c
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e047      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e03e      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d136      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed4:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001edc:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ede:	68d2      	ldr	r2, [r2, #12]
 8001ee0:	0a12      	lsrs	r2, r2, #8
 8001ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
      break;
 8001eec:	e00c      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	0a12      	lsrs	r2, r2, #8
 8001efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0e5b      	lsrs	r3, r3, #25
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e001      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f28:	693b      	ldr	r3, [r7, #16]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	007a1200 	.word	0x007a1200

08001f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4904      	ldr	r1, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004b2c 	.word	0x08004b2c

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f8c:	f7ff ffda 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0adb      	lsrs	r3, r3, #11
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08004b2c 	.word	0x08004b2c

08001fb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d10c      	bne.n	8001ff2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe2:	68d2      	ldr	r2, [r2, #12]
 8001fe4:	0a12      	lsrs	r2, r2, #8
 8001fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
    break;
 8001ff0:	e00c      	b.n	800200c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	0a12      	lsrs	r2, r2, #8
 8002000:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    break;
 800200a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0e5b      	lsrs	r3, r3, #25
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	3301      	adds	r3, #1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	007a1200 	.word	0x007a1200
 800203c:	00f42400 	.word	0x00f42400

08002040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002048:	2300      	movs	r3, #0
 800204a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800204c:	2300      	movs	r3, #0
 800204e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8098 	beq.w	800218e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	4a3f      	ldr	r2, [pc, #252]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002096:	f7fe fe6b 	bl	8000d70 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209c:	e009      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7fe fe67 	bl	8000d70 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d902      	bls.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	74fb      	strb	r3, [r7, #19]
        break;
 80020b0:	e005      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ef      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d159      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01e      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d019      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210c:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fe27 	bl	8000d70 <HAL_GetTick>
 8002122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002124:	e00b      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fe23 	bl	8000d70 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d902      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	74fb      	strb	r3, [r7, #19]
            break;
 800213c:	e006      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ec      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10b      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002168:	e008      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	74bb      	strb	r3, [r7, #18]
 800216e:	e005      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217c:	7c7b      	ldrb	r3, [r7, #17]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4ba7      	ldr	r3, [pc, #668]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	4aa6      	ldr	r2, [pc, #664]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219a:	4ba1      	ldr	r3, [pc, #644]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 0203 	bic.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	499d      	ldr	r1, [pc, #628]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021bc:	4b98      	ldr	r3, [pc, #608]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 020c 	bic.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4995      	ldr	r1, [pc, #596]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021de:	4b90      	ldr	r3, [pc, #576]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	498c      	ldr	r1, [pc, #560]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002200:	4b87      	ldr	r3, [pc, #540]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4984      	ldr	r1, [pc, #528]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	497b      	ldr	r1, [pc, #492]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002244:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4973      	ldr	r1, [pc, #460]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	496a      	ldr	r1, [pc, #424]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4962      	ldr	r1, [pc, #392]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	4959      	ldr	r1, [pc, #356]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022cc:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	4951      	ldr	r1, [pc, #324]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4948      	ldr	r1, [pc, #288]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4940      	ldr	r1, [pc, #256]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	4932      	ldr	r1, [pc, #200]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d015      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4924      	ldr	r1, [pc, #144]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239e:	d105      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	4916      	ldr	r1, [pc, #88]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d6:	d105      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d019      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240e:	d109      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	60d3      	str	r3, [r2, #12]
 800241c:	e002      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4926      	ldr	r1, [pc, #152]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800244e:	d105      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002486:	d105      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002492:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	490a      	ldr	r1, [pc, #40]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024be:	d105      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e042      	b.n	8002574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe fa51 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2224      	movs	r2, #36	; 0x24
 800250a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fb04 	bl	8002b2c <UART_SetConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fdf4 	bl	8003124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800254a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800255a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fe7b 	bl	8003268 <UART_CheckIdleState>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002590:	2b20      	cmp	r3, #32
 8002592:	d168      	bne.n	8002666 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_Transmit_IT+0x24>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e061      	b.n	8002668 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Transmit_IT+0x36>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e05a      	b.n	8002668 <HAL_UART_Transmit_IT+0xec>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ee:	d11c      	bne.n	800262a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	d107      	bne.n	800260a <HAL_UART_Transmit_IT+0x8e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_UART_Transmit_IT+0xf8>)
 8002606:	675a      	str	r2, [r3, #116]	; 0x74
 8002608:	e002      	b.n	8002610 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_UART_Transmit_IT+0xfc>)
 800260e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e01b      	b.n	8002662 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002632:	d107      	bne.n	8002644 <HAL_UART_Transmit_IT+0xc8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_UART_Transmit_IT+0x100>)
 8002640:	675a      	str	r2, [r3, #116]	; 0x74
 8002642:	e002      	b.n	800264a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_UART_Transmit_IT+0x104>)
 8002648:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	0800361b 	.word	0x0800361b
 8002678:	08003581 	.word	0x08003581
 800267c:	08003503 	.word	0x08003503
 8002680:	0800348f 	.word	0x0800348f

08002684 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 81fb 	beq.w	8002ad2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
      }
      return;
 80026e4:	e1f5      	b.n	8002ad2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80ef 	beq.w	80028cc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_UART_IRQHandler+0x23c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_UART_IRQHandler+0x240>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80e4 	beq.w	80028cc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_UART_IRQHandler+0xac>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_UART_IRQHandler+0xd8>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2202      	movs	r2, #2
 800274a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_UART_IRQHandler+0x104>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2204      	movs	r2, #4
 8002776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d015      	beq.n	80027be <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_UART_IRQHandler+0x23c>)
 80027a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b4:	f043 0208 	orr.w	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d011      	beq.n	80027ec <HAL_UART_IRQHandler+0x168>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 816f 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d004      	beq.n	8002846 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d031      	beq.n	80028aa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fdd9 	bl	80033fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d123      	bne.n	80028a2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002868:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_UART_IRQHandler+0x244>)
 8002878:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fc0c 	bl	800109c <HAL_DMA_Abort_IT>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00f      	b.n	80028ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f930 	bl	8002b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e00b      	b.n	80028ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f92c 	bl	8002b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a8:	e007      	b.n	80028ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f928 	bl	8002b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80028b8:	e10d      	b.n	8002ad6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ba:	bf00      	nop
    return;
 80028bc:	e10b      	b.n	8002ad6 <HAL_UART_IRQHandler+0x452>
 80028be:	bf00      	nop
 80028c0:	10000001 	.word	0x10000001
 80028c4:	04000120 	.word	0x04000120
 80028c8:	08003463 	.word	0x08003463

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 80ab 	bne.w	8002a2c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a5 	beq.w	8002a2c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 809f 	beq.w	8002a2c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d155      	bne.n	80029b0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800290e:	893b      	ldrh	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80e2 	beq.w	8002ada <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800291c:	893a      	ldrh	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	f080 80db 	bcs.w	8002ada <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	893a      	ldrh	r2, [r7, #8]
 8002928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d12b      	bne.n	8002994 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fb2b 	bl	8000fea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8b3 	bl	8002b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029ae:	e094      	b.n	8002ada <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8083 	beq.w	8002ade <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029e6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0210 	bic.w	r2, r2, #16
 8002a1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a20:	897b      	ldrh	r3, [r7, #10]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f875 	bl	8002b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a2a:	e058      	b.n	8002ade <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <HAL_UART_IRQHandler+0x3ce>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fe51 	bl	80036f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a50:	e048      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d034      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
    }
    return;
 8002a80:	e02f      	b.n	8002ae2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_UART_IRQHandler+0x41a>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fe11 	bl	80036be <UART_EndTransmit_IT>
    return;
 8002a9c:	e022      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_UART_IRQHandler+0x436>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fe31 	bl	800371a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ab8:	e014      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00f      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x460>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0c      	bge.n	8002ae4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fe1b 	bl	8003706 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ad0:	e008      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
      return;
 8002ad2:	bf00      	nop
 8002ad4:	e006      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
    return;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
      return;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
      return;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_IRQHandler+0x460>
    return;
 8002ae2:	bf00      	nop
  }
}
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b08c      	sub	sp, #48	; 0x30
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4baa      	ldr	r3, [pc, #680]	; (8002e04 <UART_SetConfig+0x2d8>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a9f      	ldr	r2, [pc, #636]	; (8002e08 <UART_SetConfig+0x2dc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b94:	4313      	orrs	r3, r2
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f023 010f 	bic.w	r1, r3, #15
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <UART_SetConfig+0x2e0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d125      	bne.n	8002c1c <UART_SetConfig+0xf0>
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d81a      	bhi.n	8002c14 <UART_SetConfig+0xe8>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <UART_SetConfig+0xb8>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c05 	.word	0x08002c05
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0d 	.word	0x08002c0d
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bfa:	e116      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c02:	e112      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c04:	2304      	movs	r3, #4
 8002c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c0a:	e10e      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c12:	e10a      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c14:	2310      	movs	r3, #16
 8002c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c1a:	e106      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7c      	ldr	r2, [pc, #496]	; (8002e14 <UART_SetConfig+0x2e8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d138      	bne.n	8002c98 <UART_SetConfig+0x16c>
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d82d      	bhi.n	8002c90 <UART_SetConfig+0x164>
 8002c34:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <UART_SetConfig+0x110>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002c91 	.word	0x08002c91
 8002c48:	08002c91 	.word	0x08002c91
 8002c4c:	08002c81 	.word	0x08002c81
 8002c50:	08002c91 	.word	0x08002c91
 8002c54:	08002c91 	.word	0x08002c91
 8002c58:	08002c91 	.word	0x08002c91
 8002c5c:	08002c79 	.word	0x08002c79
 8002c60:	08002c91 	.word	0x08002c91
 8002c64:	08002c91 	.word	0x08002c91
 8002c68:	08002c91 	.word	0x08002c91
 8002c6c:	08002c89 	.word	0x08002c89
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c76:	e0d8      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c7e:	e0d4      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c80:	2304      	movs	r3, #4
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c86:	e0d0      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c88:	2308      	movs	r3, #8
 8002c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c8e:	e0cc      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c90:	2310      	movs	r3, #16
 8002c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c96:	e0c8      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5e      	ldr	r2, [pc, #376]	; (8002e18 <UART_SetConfig+0x2ec>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d125      	bne.n	8002cee <UART_SetConfig+0x1c2>
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d016      	beq.n	8002cde <UART_SetConfig+0x1b2>
 8002cb0:	2b30      	cmp	r3, #48	; 0x30
 8002cb2:	d818      	bhi.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d00a      	beq.n	8002cce <UART_SetConfig+0x1a2>
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d814      	bhi.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <UART_SetConfig+0x19a>
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d008      	beq.n	8002cd6 <UART_SetConfig+0x1aa>
 8002cc4:	e00f      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ccc:	e0ad      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cd4:	e0a9      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cdc:	e0a5      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce4:	e0a1      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cec:	e09d      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <UART_SetConfig+0x2f0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d125      	bne.n	8002d44 <UART_SetConfig+0x218>
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d02:	2bc0      	cmp	r3, #192	; 0xc0
 8002d04:	d016      	beq.n	8002d34 <UART_SetConfig+0x208>
 8002d06:	2bc0      	cmp	r3, #192	; 0xc0
 8002d08:	d818      	bhi.n	8002d3c <UART_SetConfig+0x210>
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d00a      	beq.n	8002d24 <UART_SetConfig+0x1f8>
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d814      	bhi.n	8002d3c <UART_SetConfig+0x210>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <UART_SetConfig+0x1f0>
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d008      	beq.n	8002d2c <UART_SetConfig+0x200>
 8002d1a:	e00f      	b.n	8002d3c <UART_SetConfig+0x210>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d22:	e082      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d24:	2302      	movs	r3, #2
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2a:	e07e      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d32:	e07a      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d34:	2308      	movs	r3, #8
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	e076      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d42:	e072      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <UART_SetConfig+0x2f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d12a      	bne.n	8002da4 <UART_SetConfig+0x278>
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d5c:	d01a      	beq.n	8002d94 <UART_SetConfig+0x268>
 8002d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d62:	d81b      	bhi.n	8002d9c <UART_SetConfig+0x270>
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d00c      	beq.n	8002d84 <UART_SetConfig+0x258>
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d815      	bhi.n	8002d9c <UART_SetConfig+0x270>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <UART_SetConfig+0x250>
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d78:	d008      	beq.n	8002d8c <UART_SetConfig+0x260>
 8002d7a:	e00f      	b.n	8002d9c <UART_SetConfig+0x270>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d82:	e052      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8a:	e04e      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d92:	e04a      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d94:	2308      	movs	r3, #8
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9a:	e046      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da2:	e042      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <UART_SetConfig+0x2dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d13a      	bne.n	8002e24 <UART_SetConfig+0x2f8>
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <UART_SetConfig+0x2e4>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dbc:	d01a      	beq.n	8002df4 <UART_SetConfig+0x2c8>
 8002dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dc2:	d81b      	bhi.n	8002dfc <UART_SetConfig+0x2d0>
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc8:	d00c      	beq.n	8002de4 <UART_SetConfig+0x2b8>
 8002dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dce:	d815      	bhi.n	8002dfc <UART_SetConfig+0x2d0>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <UART_SetConfig+0x2b0>
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d008      	beq.n	8002dec <UART_SetConfig+0x2c0>
 8002dda:	e00f      	b.n	8002dfc <UART_SetConfig+0x2d0>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de2:	e022      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002de4:	2302      	movs	r3, #2
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dea:	e01e      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002dec:	2304      	movs	r3, #4
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df2:	e01a      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002df4:	2308      	movs	r3, #8
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfa:	e016      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e02:	e012      	b.n	8002e2a <UART_SetConfig+0x2fe>
 8002e04:	cfff69f3 	.word	0xcfff69f3
 8002e08:	40008000 	.word	0x40008000
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40004400 	.word	0x40004400
 8002e18:	40004800 	.word	0x40004800
 8002e1c:	40004c00 	.word	0x40004c00
 8002e20:	40005000 	.word	0x40005000
 8002e24:	2310      	movs	r3, #16
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4aae      	ldr	r2, [pc, #696]	; (80030e8 <UART_SetConfig+0x5bc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	f040 8097 	bne.w	8002f64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d823      	bhi.n	8002e86 <UART_SetConfig+0x35a>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <UART_SetConfig+0x318>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e87 	.word	0x08002e87
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002e77 	.word	0x08002e77
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e87 	.word	0x08002e87
 8002e64:	08002e7f 	.word	0x08002e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e68:	f7ff f878 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e6e:	e010      	b.n	8002e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b9e      	ldr	r3, [pc, #632]	; (80030ec <UART_SetConfig+0x5c0>)
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e74:	e00d      	b.n	8002e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff f803 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e7c:	e009      	b.n	8002e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e84:	e005      	b.n	8002e92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8130 	beq.w	80030fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	4a94      	ldr	r2, [pc, #592]	; (80030f0 <UART_SetConfig+0x5c4>)
 8002ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d305      	bcc.n	8002eca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d903      	bls.n	8002ed2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ed0:	e113      	b.n	80030fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	4a84      	ldr	r2, [pc, #528]	; (80030f0 <UART_SetConfig+0x5c4>)
 8002ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef4:	f7fd f9e4 	bl	80002c0 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	020b      	lsls	r3, r1, #8
 8002f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f0e:	0202      	lsls	r2, r0, #8
 8002f10:	6979      	ldr	r1, [r7, #20]
 8002f12:	6849      	ldr	r1, [r1, #4]
 8002f14:	0849      	lsrs	r1, r1, #1
 8002f16:	2000      	movs	r0, #0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	eb12 0804 	adds.w	r8, r2, r4
 8002f20:	eb43 0905 	adc.w	r9, r3, r5
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	469a      	mov	sl, r3
 8002f2c:	4693      	mov	fp, r2
 8002f2e:	4652      	mov	r2, sl
 8002f30:	465b      	mov	r3, fp
 8002f32:	4640      	mov	r0, r8
 8002f34:	4649      	mov	r1, r9
 8002f36:	f7fd f9c3 	bl	80002c0 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f48:	d308      	bcc.n	8002f5c <UART_SetConfig+0x430>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f50:	d204      	bcs.n	8002f5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a3a      	ldr	r2, [r7, #32]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e0ce      	b.n	80030fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f62:	e0ca      	b.n	80030fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	d167      	bne.n	800303e <UART_SetConfig+0x512>
  {
    switch (clocksource)
 8002f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d827      	bhi.n	8002fc6 <UART_SetConfig+0x49a>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x450>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fc7 	.word	0x08002fc7
 8002f94:	08002fc7 	.word	0x08002fc7
 8002f98:	08002fc7 	.word	0x08002fc7
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe ffdc 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fa6:	e014      	b.n	8002fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7fe ffee 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fae:	e010      	b.n	8002fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b4e      	ldr	r3, [pc, #312]	; (80030ec <UART_SetConfig+0x5c0>)
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fb4:	e00d      	b.n	8002fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7fe ff63 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fbc:	e009      	b.n	8002fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fc4:	e005      	b.n	8002fd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8090 	beq.w	80030fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	4a44      	ldr	r2, [pc, #272]	; (80030f0 <UART_SetConfig+0x5c4>)
 8002fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	441a      	add	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d916      	bls.n	8003036 <UART_SetConfig+0x50a>
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300e:	d212      	bcs.n	8003036 <UART_SetConfig+0x50a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f023 030f 	bic.w	r3, r3, #15
 8003018:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	b29a      	uxth	r2, r3
 8003026:	8bfb      	ldrh	r3, [r7, #30]
 8003028:	4313      	orrs	r3, r2
 800302a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	8bfa      	ldrh	r2, [r7, #30]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e061      	b.n	80030fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800303c:	e05d      	b.n	80030fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003042:	2b08      	cmp	r3, #8
 8003044:	d827      	bhi.n	8003096 <UART_SetConfig+0x56a>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0x520>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	08003097 	.word	0x08003097
 800305c:	08003087 	.word	0x08003087
 8003060:	08003097 	.word	0x08003097
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7fe ff74 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003076:	e014      	b.n	80030a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7fe ff86 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800307e:	e010      	b.n	80030a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <UART_SetConfig+0x5c0>)
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003084:	e00d      	b.n	80030a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7fe fefb 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800308c:	e009      	b.n	80030a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003094:	e005      	b.n	80030a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030a0:	bf00      	nop
    }

    if (pclk != 0U)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d028      	beq.n	80030fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <UART_SetConfig+0x5c4>)
 80030ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	441a      	add	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d90f      	bls.n	80030f4 <UART_SetConfig+0x5c8>
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d20b      	bcs.n	80030f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = usartdiv;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e009      	b.n	80030fa <UART_SetConfig+0x5ce>
 80030e6:	bf00      	nop
 80030e8:	40008000 	.word	0x40008000
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	08004b34 	.word	0x08004b34
      }
      else
      {
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2201      	movs	r2, #1
 8003106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800311a:	4618      	mov	r0, r3
 800311c:	3730      	adds	r7, #48	; 0x30
 800311e:	46bd      	mov	sp, r7
 8003120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01a      	beq.n	800323a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003222:	d10a      	bne.n	800323a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003278:	f7fd fd7a 	bl	8000d70 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b08      	cmp	r3, #8
 800328a:	d10e      	bne.n	80032aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f82f 	bl	80032fe <UART_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e025      	b.n	80032f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d10e      	bne.n	80032d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f819 	bl	80032fe <UART_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00f      	b.n	80032f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4613      	mov	r3, r2
 800330c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	e062      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d05e      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003318:	f7fd fd2a 	bl	8000d70 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <UART_WaitOnFlagUntilTimeout+0x30>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800333c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02e      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003386:	d126      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003390:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00f      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d08d      	beq.n	8003310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003414:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fb3d 	bl	8002b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349c:	2b21      	cmp	r3, #33	; 0x21
 800349e:	d12a      	bne.n	80034f6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d110      	bne.n	80034ce <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ba:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80034cc:	e013      	b.n	80034f6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003510:	2b21      	cmp	r3, #33	; 0x21
 8003512:	d12f      	bne.n	8003574 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d110      	bne.n	8003542 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003540:	e018      	b.n	8003574 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d13d      	bne.n	800360e <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003598:	81fb      	strh	r3, [r7, #14]
 800359a:	e035      	b.n	8003608 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80035b6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80035c8:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80035ca:	e020      	b.n	800360e <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d013      	beq.n	8003602 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	3b01      	subs	r3, #1
 8003606:	81fb      	strh	r3, [r7, #14]
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1c6      	bne.n	800359c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d142      	bne.n	80036b2 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003632:	81fb      	strh	r3, [r7, #14]
 8003634:	e03a      	b.n	80036ac <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d111      	bne.n	8003666 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003650:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003660:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8003662:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8003664:	e025      	b.n	80036b2 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d018      	beq.n	80036a6 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80036a6:	89fb      	ldrh	r3, [r7, #14]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	81fb      	strh	r3, [r7, #14]
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1c1      	bne.n	8003636 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fa01 	bl	8002aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_DisableFifoMode+0x16>
 8003740:	2302      	movs	r3, #2
 8003742:	e027      	b.n	8003794 <HAL_UARTEx_DisableFifoMode+0x66>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003772:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e02d      	b.n	8003814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f84f 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e02d      	b.n	8003890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f811 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038b8:	e031      	b.n	800391e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ba:	2308      	movs	r3, #8
 80038bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038be:	2308      	movs	r3, #8
 80038c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0e5b      	lsrs	r3, r3, #25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	0f5b      	lsrs	r3, r3, #29
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	7b3a      	ldrb	r2, [r7, #12]
 80038e6:	4911      	ldr	r1, [pc, #68]	; (800392c <UARTEx_SetNbDataToProcess+0x94>)
 80038e8:	5c8a      	ldrb	r2, [r1, r2]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ee:	7b3a      	ldrb	r2, [r7, #12]
 80038f0:	490f      	ldr	r1, [pc, #60]	; (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 80038f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	7b7a      	ldrb	r2, [r7, #13]
 8003904:	4909      	ldr	r1, [pc, #36]	; (800392c <UARTEx_SetNbDataToProcess+0x94>)
 8003906:	5c8a      	ldrb	r2, [r1, r2]
 8003908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800390c:	7b7a      	ldrb	r2, [r7, #13]
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 8003910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003912:	fb93 f3f2 	sdiv	r3, r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	08004b4c 	.word	0x08004b4c
 8003930:	08004b54 	.word	0x08004b54

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f001 f8d4 	bl	8004b00 <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08004cac 	.word	0x08004cac
 800397c:	08004cac 	.word	0x08004cac
 8003980:	08004cac 	.word	0x08004cac
 8003984:	08004cb0 	.word	0x08004cb0

08003988 <memset>:
 8003988:	4402      	add	r2, r0
 800398a:	4603      	mov	r3, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <iprintf>:
 8003998:	b40f      	push	{r0, r1, r2, r3}
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <iprintf+0x2c>)
 800399c:	b513      	push	{r0, r1, r4, lr}
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	b124      	cbz	r4, 80039ac <iprintf+0x14>
 80039a2:	69a3      	ldr	r3, [r4, #24]
 80039a4:	b913      	cbnz	r3, 80039ac <iprintf+0x14>
 80039a6:	4620      	mov	r0, r4
 80039a8:	f000 f90a 	bl	8003bc0 <__sinit>
 80039ac:	ab05      	add	r3, sp, #20
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	68a1      	ldr	r1, [r4, #8]
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 fadb 	bl	8003f70 <_vfiprintf_r>
 80039ba:	b002      	add	sp, #8
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c0:	b004      	add	sp, #16
 80039c2:	4770      	bx	lr
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <srand>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <srand+0x44>)
 80039cc:	681d      	ldr	r5, [r3, #0]
 80039ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80039d0:	4604      	mov	r4, r0
 80039d2:	b9b3      	cbnz	r3, 8003a02 <srand+0x3a>
 80039d4:	2018      	movs	r0, #24
 80039d6:	f000 f9b9 	bl	8003d4c <malloc>
 80039da:	4602      	mov	r2, r0
 80039dc:	63a8      	str	r0, [r5, #56]	; 0x38
 80039de:	b920      	cbnz	r0, 80039ea <srand+0x22>
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <srand+0x48>)
 80039e2:	480c      	ldr	r0, [pc, #48]	; (8003a14 <srand+0x4c>)
 80039e4:	2142      	movs	r1, #66	; 0x42
 80039e6:	f000 f875 	bl	8003ad4 <__assert_func>
 80039ea:	490b      	ldr	r1, [pc, #44]	; (8003a18 <srand+0x50>)
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <srand+0x54>)
 80039ee:	e9c0 1300 	strd	r1, r3, [r0]
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <srand+0x58>)
 80039f4:	6083      	str	r3, [r0, #8]
 80039f6:	230b      	movs	r3, #11
 80039f8:	8183      	strh	r3, [r0, #12]
 80039fa:	2100      	movs	r1, #0
 80039fc:	2001      	movs	r0, #1
 80039fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003a02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a04:	2200      	movs	r2, #0
 8003a06:	611c      	str	r4, [r3, #16]
 8003a08:	615a      	str	r2, [r3, #20]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	08004b60 	.word	0x08004b60
 8003a14:	08004b77 	.word	0x08004b77
 8003a18:	abcd330e 	.word	0xabcd330e
 8003a1c:	e66d1234 	.word	0xe66d1234
 8003a20:	0005deec 	.word	0x0005deec

08003a24 <rand>:
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <rand+0x5c>)
 8003a26:	b510      	push	{r4, lr}
 8003a28:	681c      	ldr	r4, [r3, #0]
 8003a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a2c:	b9b3      	cbnz	r3, 8003a5c <rand+0x38>
 8003a2e:	2018      	movs	r0, #24
 8003a30:	f000 f98c 	bl	8003d4c <malloc>
 8003a34:	63a0      	str	r0, [r4, #56]	; 0x38
 8003a36:	b928      	cbnz	r0, 8003a44 <rand+0x20>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <rand+0x60>)
 8003a3c:	4812      	ldr	r0, [pc, #72]	; (8003a88 <rand+0x64>)
 8003a3e:	214e      	movs	r1, #78	; 0x4e
 8003a40:	f000 f848 	bl	8003ad4 <__assert_func>
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <rand+0x68>)
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <rand+0x6c>)
 8003a48:	e9c0 2300 	strd	r2, r3, [r0]
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <rand+0x70>)
 8003a4e:	6083      	str	r3, [r0, #8]
 8003a50:	230b      	movs	r3, #11
 8003a52:	8183      	strh	r3, [r0, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	2300      	movs	r3, #0
 8003a58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003a5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <rand+0x74>)
 8003a60:	6920      	ldr	r0, [r4, #16]
 8003a62:	6963      	ldr	r3, [r4, #20]
 8003a64:	490d      	ldr	r1, [pc, #52]	; (8003a9c <rand+0x78>)
 8003a66:	4342      	muls	r2, r0
 8003a68:	fb01 2203 	mla	r2, r1, r3, r2
 8003a6c:	fba0 0101 	umull	r0, r1, r0, r1
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	eb42 0001 	adc.w	r0, r2, r1
 8003a76:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003a7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a7e:	bd10      	pop	{r4, pc}
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	08004b60 	.word	0x08004b60
 8003a88:	08004b77 	.word	0x08004b77
 8003a8c:	abcd330e 	.word	0xabcd330e
 8003a90:	e66d1234 	.word	0xe66d1234
 8003a94:	0005deec 	.word	0x0005deec
 8003a98:	5851f42d 	.word	0x5851f42d
 8003a9c:	4c957f2d 	.word	0x4c957f2d

08003aa0 <time>:
 8003aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <time+0x30>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4669      	mov	r1, sp
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f000 f938 	bl	8003d20 <_gettimeofday_r>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	bfbe      	ittt	lt
 8003ab4:	f04f 32ff 	movlt.w	r2, #4294967295
 8003ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003abc:	e9cd 2300 	strdlt	r2, r3, [sp]
 8003ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ac4:	b10c      	cbz	r4, 8003aca <time+0x2a>
 8003ac6:	e9c4 0100 	strd	r0, r1, [r4]
 8003aca:	b004      	add	sp, #16
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <__assert_func>:
 8003ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <__assert_func+0x2c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4605      	mov	r5, r0
 8003ae0:	68d8      	ldr	r0, [r3, #12]
 8003ae2:	b14c      	cbz	r4, 8003af8 <__assert_func+0x24>
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <__assert_func+0x30>)
 8003ae6:	9100      	str	r1, [sp, #0]
 8003ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003aec:	4906      	ldr	r1, [pc, #24]	; (8003b08 <__assert_func+0x34>)
 8003aee:	462b      	mov	r3, r5
 8003af0:	f000 f8e4 	bl	8003cbc <fiprintf>
 8003af4:	f000 fe26 	bl	8004744 <abort>
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <__assert_func+0x38>)
 8003afa:	461c      	mov	r4, r3
 8003afc:	e7f3      	b.n	8003ae6 <__assert_func+0x12>
 8003afe:	bf00      	nop
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	08004bd2 	.word	0x08004bd2
 8003b08:	08004bdf 	.word	0x08004bdf
 8003b0c:	08004c0d 	.word	0x08004c0d

08003b10 <std>:
 8003b10:	2300      	movs	r3, #0
 8003b12:	b510      	push	{r4, lr}
 8003b14:	4604      	mov	r4, r0
 8003b16:	e9c0 3300 	strd	r3, r3, [r0]
 8003b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b1e:	6083      	str	r3, [r0, #8]
 8003b20:	8181      	strh	r1, [r0, #12]
 8003b22:	6643      	str	r3, [r0, #100]	; 0x64
 8003b24:	81c2      	strh	r2, [r0, #14]
 8003b26:	6183      	str	r3, [r0, #24]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	305c      	adds	r0, #92	; 0x5c
 8003b2e:	f7ff ff2b 	bl	8003988 <memset>
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <std+0x38>)
 8003b34:	6263      	str	r3, [r4, #36]	; 0x24
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <std+0x3c>)
 8003b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <std+0x40>)
 8003b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <std+0x44>)
 8003b40:	6224      	str	r4, [r4, #32]
 8003b42:	6323      	str	r3, [r4, #48]	; 0x30
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	08004519 	.word	0x08004519
 8003b4c:	0800453b 	.word	0x0800453b
 8003b50:	08004573 	.word	0x08004573
 8003b54:	08004597 	.word	0x08004597

08003b58 <_cleanup_r>:
 8003b58:	4901      	ldr	r1, [pc, #4]	; (8003b60 <_cleanup_r+0x8>)
 8003b5a:	f000 b8c1 	b.w	8003ce0 <_fwalk_reent>
 8003b5e:	bf00      	nop
 8003b60:	08004881 	.word	0x08004881

08003b64 <__sfmoreglue>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	2268      	movs	r2, #104	; 0x68
 8003b68:	1e4d      	subs	r5, r1, #1
 8003b6a:	4355      	muls	r5, r2
 8003b6c:	460e      	mov	r6, r1
 8003b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b72:	f000 f95f 	bl	8003e34 <_malloc_r>
 8003b76:	4604      	mov	r4, r0
 8003b78:	b140      	cbz	r0, 8003b8c <__sfmoreglue+0x28>
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b80:	300c      	adds	r0, #12
 8003b82:	60a0      	str	r0, [r4, #8]
 8003b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b88:	f7ff fefe 	bl	8003988 <memset>
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}

08003b90 <__sfp_lock_acquire>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__sfp_lock_acquire+0x8>)
 8003b92:	f000 b8d8 	b.w	8003d46 <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	20000139 	.word	0x20000139

08003b9c <__sfp_lock_release>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__sfp_lock_release+0x8>)
 8003b9e:	f000 b8d3 	b.w	8003d48 <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	20000139 	.word	0x20000139

08003ba8 <__sinit_lock_acquire>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__sinit_lock_acquire+0x8>)
 8003baa:	f000 b8cc 	b.w	8003d46 <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	2000013a 	.word	0x2000013a

08003bb4 <__sinit_lock_release>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	; (8003bbc <__sinit_lock_release+0x8>)
 8003bb6:	f000 b8c7 	b.w	8003d48 <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	2000013a 	.word	0x2000013a

08003bc0 <__sinit>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	f7ff fff0 	bl	8003ba8 <__sinit_lock_acquire>
 8003bc8:	69a3      	ldr	r3, [r4, #24]
 8003bca:	b11b      	cbz	r3, 8003bd4 <__sinit+0x14>
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd0:	f7ff bff0 	b.w	8003bb4 <__sinit_lock_release>
 8003bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <__sinit+0x68>)
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <__sinit+0x6c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	bf04      	itt	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	61a3      	streq	r3, [r4, #24]
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 f820 	bl	8003c30 <__sfp>
 8003bf0:	6060      	str	r0, [r4, #4]
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 f81c 	bl	8003c30 <__sfp>
 8003bf8:	60a0      	str	r0, [r4, #8]
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 f818 	bl	8003c30 <__sfp>
 8003c00:	2200      	movs	r2, #0
 8003c02:	60e0      	str	r0, [r4, #12]
 8003c04:	2104      	movs	r1, #4
 8003c06:	6860      	ldr	r0, [r4, #4]
 8003c08:	f7ff ff82 	bl	8003b10 <std>
 8003c0c:	68a0      	ldr	r0, [r4, #8]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2109      	movs	r1, #9
 8003c12:	f7ff ff7d 	bl	8003b10 <std>
 8003c16:	68e0      	ldr	r0, [r4, #12]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	2112      	movs	r1, #18
 8003c1c:	f7ff ff78 	bl	8003b10 <std>
 8003c20:	2301      	movs	r3, #1
 8003c22:	61a3      	str	r3, [r4, #24]
 8003c24:	e7d2      	b.n	8003bcc <__sinit+0xc>
 8003c26:	bf00      	nop
 8003c28:	08004b5c 	.word	0x08004b5c
 8003c2c:	08003b59 	.word	0x08003b59

08003c30 <__sfp>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	4607      	mov	r7, r0
 8003c34:	f7ff ffac 	bl	8003b90 <__sfp_lock_acquire>
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <__sfp+0x84>)
 8003c3a:	681e      	ldr	r6, [r3, #0]
 8003c3c:	69b3      	ldr	r3, [r6, #24]
 8003c3e:	b913      	cbnz	r3, 8003c46 <__sfp+0x16>
 8003c40:	4630      	mov	r0, r6
 8003c42:	f7ff ffbd 	bl	8003bc0 <__sinit>
 8003c46:	3648      	adds	r6, #72	; 0x48
 8003c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	d503      	bpl.n	8003c58 <__sfp+0x28>
 8003c50:	6833      	ldr	r3, [r6, #0]
 8003c52:	b30b      	cbz	r3, 8003c98 <__sfp+0x68>
 8003c54:	6836      	ldr	r6, [r6, #0]
 8003c56:	e7f7      	b.n	8003c48 <__sfp+0x18>
 8003c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c5c:	b9d5      	cbnz	r5, 8003c94 <__sfp+0x64>
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <__sfp+0x88>)
 8003c60:	60e3      	str	r3, [r4, #12]
 8003c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c66:	6665      	str	r5, [r4, #100]	; 0x64
 8003c68:	f000 f86c 	bl	8003d44 <__retarget_lock_init_recursive>
 8003c6c:	f7ff ff96 	bl	8003b9c <__sfp_lock_release>
 8003c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c78:	6025      	str	r5, [r4, #0]
 8003c7a:	61a5      	str	r5, [r4, #24]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c84:	f7ff fe80 	bl	8003988 <memset>
 8003c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c90:	4620      	mov	r0, r4
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c94:	3468      	adds	r4, #104	; 0x68
 8003c96:	e7d9      	b.n	8003c4c <__sfp+0x1c>
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	f7ff ff62 	bl	8003b64 <__sfmoreglue>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	6030      	str	r0, [r6, #0]
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d1d5      	bne.n	8003c54 <__sfp+0x24>
 8003ca8:	f7ff ff78 	bl	8003b9c <__sfp_lock_release>
 8003cac:	230c      	movs	r3, #12
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	e7ee      	b.n	8003c90 <__sfp+0x60>
 8003cb2:	bf00      	nop
 8003cb4:	08004b5c 	.word	0x08004b5c
 8003cb8:	ffff0001 	.word	0xffff0001

08003cbc <fiprintf>:
 8003cbc:	b40e      	push	{r1, r2, r3}
 8003cbe:	b503      	push	{r0, r1, lr}
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	ab03      	add	r3, sp, #12
 8003cc4:	4805      	ldr	r0, [pc, #20]	; (8003cdc <fiprintf+0x20>)
 8003cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	f000 f94f 	bl	8003f70 <_vfiprintf_r>
 8003cd2:	b002      	add	sp, #8
 8003cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd8:	b003      	add	sp, #12
 8003cda:	4770      	bx	lr
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <_fwalk_reent>:
 8003ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	4688      	mov	r8, r1
 8003ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cec:	2700      	movs	r7, #0
 8003cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf6:	d505      	bpl.n	8003d04 <_fwalk_reent+0x24>
 8003cf8:	6824      	ldr	r4, [r4, #0]
 8003cfa:	2c00      	cmp	r4, #0
 8003cfc:	d1f7      	bne.n	8003cee <_fwalk_reent+0xe>
 8003cfe:	4638      	mov	r0, r7
 8003d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d04:	89ab      	ldrh	r3, [r5, #12]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d907      	bls.n	8003d1a <_fwalk_reent+0x3a>
 8003d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	d003      	beq.n	8003d1a <_fwalk_reent+0x3a>
 8003d12:	4629      	mov	r1, r5
 8003d14:	4630      	mov	r0, r6
 8003d16:	47c0      	blx	r8
 8003d18:	4307      	orrs	r7, r0
 8003d1a:	3568      	adds	r5, #104	; 0x68
 8003d1c:	e7e9      	b.n	8003cf2 <_fwalk_reent+0x12>
	...

08003d20 <_gettimeofday_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	; (8003d40 <_gettimeofday_r+0x20>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	f000 fedf 	bl	8004af0 <_gettimeofday>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	d102      	bne.n	8003d3c <_gettimeofday_r+0x1c>
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	b103      	cbz	r3, 8003d3c <_gettimeofday_r+0x1c>
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000144 	.word	0x20000144

08003d44 <__retarget_lock_init_recursive>:
 8003d44:	4770      	bx	lr

08003d46 <__retarget_lock_acquire_recursive>:
 8003d46:	4770      	bx	lr

08003d48 <__retarget_lock_release_recursive>:
 8003d48:	4770      	bx	lr
	...

08003d4c <malloc>:
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <malloc+0xc>)
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f000 b86f 	b.w	8003e34 <_malloc_r>
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <_free_r>:
 8003d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	d044      	beq.n	8003dec <_free_r+0x90>
 8003d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d66:	9001      	str	r0, [sp, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d6e:	bfb8      	it	lt
 8003d70:	18e4      	addlt	r4, r4, r3
 8003d72:	f000 fe39 	bl	80049e8 <__malloc_lock>
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <_free_r+0x94>)
 8003d78:	9801      	ldr	r0, [sp, #4]
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_free_r+0x30>
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6014      	str	r4, [r2, #0]
 8003d82:	b003      	add	sp, #12
 8003d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d88:	f000 be34 	b.w	80049f4 <__malloc_unlock>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x46>
 8003d90:	6825      	ldr	r5, [r4, #0]
 8003d92:	1961      	adds	r1, r4, r5
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf01      	itttt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	1949      	addeq	r1, r1, r5
 8003d9e:	6021      	streq	r1, [r4, #0]
 8003da0:	e7ed      	b.n	8003d7e <_free_r+0x22>
 8003da2:	461a      	mov	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b10b      	cbz	r3, 8003dac <_free_r+0x50>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x46>
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	1855      	adds	r5, r2, r1
 8003db0:	42a5      	cmp	r5, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x70>
 8003db4:	6824      	ldr	r4, [r4, #0]
 8003db6:	4421      	add	r1, r4
 8003db8:	1854      	adds	r4, r2, r1
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	d1e0      	bne.n	8003d82 <_free_r+0x26>
 8003dc0:	681c      	ldr	r4, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	6053      	str	r3, [r2, #4]
 8003dc6:	4421      	add	r1, r4
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	e7da      	b.n	8003d82 <_free_r+0x26>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x78>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	e7d6      	b.n	8003d82 <_free_r+0x26>
 8003dd4:	6825      	ldr	r5, [r4, #0]
 8003dd6:	1961      	adds	r1, r4, r5
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf04      	itt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	bf04      	itt	eq
 8003de4:	1949      	addeq	r1, r1, r5
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	6054      	str	r4, [r2, #4]
 8003dea:	e7ca      	b.n	8003d82 <_free_r+0x26>
 8003dec:	b003      	add	sp, #12
 8003dee:	bd30      	pop	{r4, r5, pc}
 8003df0:	2000013c 	.word	0x2000013c

08003df4 <sbrk_aligned>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0e      	ldr	r6, [pc, #56]	; (8003e30 <sbrk_aligned+0x3c>)
 8003df8:	460c      	mov	r4, r1
 8003dfa:	6831      	ldr	r1, [r6, #0]
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	b911      	cbnz	r1, 8003e06 <sbrk_aligned+0x12>
 8003e00:	f000 fb7a 	bl	80044f8 <_sbrk_r>
 8003e04:	6030      	str	r0, [r6, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 fb75 	bl	80044f8 <_sbrk_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d00a      	beq.n	8003e28 <sbrk_aligned+0x34>
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d007      	beq.n	8003e2c <sbrk_aligned+0x38>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 fb6a 	bl	80044f8 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d101      	bne.n	8003e2c <sbrk_aligned+0x38>
 8003e28:	f04f 34ff 	mov.w	r4, #4294967295
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	20000140 	.word	0x20000140

08003e34 <_malloc_r>:
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4607      	mov	r7, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d905      	bls.n	8003e5c <_malloc_r+0x28>
 8003e50:	230c      	movs	r3, #12
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	2600      	movs	r6, #0
 8003e56:	4630      	mov	r0, r6
 8003e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e5c:	4e2e      	ldr	r6, [pc, #184]	; (8003f18 <_malloc_r+0xe4>)
 8003e5e:	f000 fdc3 	bl	80049e8 <__malloc_lock>
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	461c      	mov	r4, r3
 8003e66:	bb34      	cbnz	r4, 8003eb6 <_malloc_r+0x82>
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f7ff ffc2 	bl	8003df4 <sbrk_aligned>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	4604      	mov	r4, r0
 8003e74:	d14d      	bne.n	8003f12 <_malloc_r+0xde>
 8003e76:	6834      	ldr	r4, [r6, #0]
 8003e78:	4626      	mov	r6, r4
 8003e7a:	2e00      	cmp	r6, #0
 8003e7c:	d140      	bne.n	8003f00 <_malloc_r+0xcc>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	4631      	mov	r1, r6
 8003e82:	4638      	mov	r0, r7
 8003e84:	eb04 0803 	add.w	r8, r4, r3
 8003e88:	f000 fb36 	bl	80044f8 <_sbrk_r>
 8003e8c:	4580      	cmp	r8, r0
 8003e8e:	d13a      	bne.n	8003f06 <_malloc_r+0xd2>
 8003e90:	6821      	ldr	r1, [r4, #0]
 8003e92:	3503      	adds	r5, #3
 8003e94:	1a6d      	subs	r5, r5, r1
 8003e96:	f025 0503 	bic.w	r5, r5, #3
 8003e9a:	3508      	adds	r5, #8
 8003e9c:	2d0c      	cmp	r5, #12
 8003e9e:	bf38      	it	cc
 8003ea0:	250c      	movcc	r5, #12
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ffa5 	bl	8003df4 <sbrk_aligned>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d02b      	beq.n	8003f06 <_malloc_r+0xd2>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	442b      	add	r3, r5
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	e00e      	b.n	8003ed4 <_malloc_r+0xa0>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	1b52      	subs	r2, r2, r5
 8003eba:	d41e      	bmi.n	8003efa <_malloc_r+0xc6>
 8003ebc:	2a0b      	cmp	r2, #11
 8003ebe:	d916      	bls.n	8003eee <_malloc_r+0xba>
 8003ec0:	1961      	adds	r1, r4, r5
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	6025      	str	r5, [r4, #0]
 8003ec6:	bf18      	it	ne
 8003ec8:	6059      	strne	r1, [r3, #4]
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	bf08      	it	eq
 8003ece:	6031      	streq	r1, [r6, #0]
 8003ed0:	5162      	str	r2, [r4, r5]
 8003ed2:	604b      	str	r3, [r1, #4]
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	f104 060b 	add.w	r6, r4, #11
 8003eda:	f000 fd8b 	bl	80049f4 <__malloc_unlock>
 8003ede:	f026 0607 	bic.w	r6, r6, #7
 8003ee2:	1d23      	adds	r3, r4, #4
 8003ee4:	1af2      	subs	r2, r6, r3
 8003ee6:	d0b6      	beq.n	8003e56 <_malloc_r+0x22>
 8003ee8:	1b9b      	subs	r3, r3, r6
 8003eea:	50a3      	str	r3, [r4, r2]
 8003eec:	e7b3      	b.n	8003e56 <_malloc_r+0x22>
 8003eee:	6862      	ldr	r2, [r4, #4]
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	bf0c      	ite	eq
 8003ef4:	6032      	streq	r2, [r6, #0]
 8003ef6:	605a      	strne	r2, [r3, #4]
 8003ef8:	e7ec      	b.n	8003ed4 <_malloc_r+0xa0>
 8003efa:	4623      	mov	r3, r4
 8003efc:	6864      	ldr	r4, [r4, #4]
 8003efe:	e7b2      	b.n	8003e66 <_malloc_r+0x32>
 8003f00:	4634      	mov	r4, r6
 8003f02:	6876      	ldr	r6, [r6, #4]
 8003f04:	e7b9      	b.n	8003e7a <_malloc_r+0x46>
 8003f06:	230c      	movs	r3, #12
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f000 fd72 	bl	80049f4 <__malloc_unlock>
 8003f10:	e7a1      	b.n	8003e56 <_malloc_r+0x22>
 8003f12:	6025      	str	r5, [r4, #0]
 8003f14:	e7de      	b.n	8003ed4 <_malloc_r+0xa0>
 8003f16:	bf00      	nop
 8003f18:	2000013c 	.word	0x2000013c

08003f1c <__sfputc_r>:
 8003f1c:	6893      	ldr	r3, [r2, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	b410      	push	{r4}
 8003f24:	6093      	str	r3, [r2, #8]
 8003f26:	da08      	bge.n	8003f3a <__sfputc_r+0x1e>
 8003f28:	6994      	ldr	r4, [r2, #24]
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	db01      	blt.n	8003f32 <__sfputc_r+0x16>
 8003f2e:	290a      	cmp	r1, #10
 8003f30:	d103      	bne.n	8003f3a <__sfputc_r+0x1e>
 8003f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f36:	f000 bb33 	b.w	80045a0 <__swbuf_r>
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	1c58      	adds	r0, r3, #1
 8003f3e:	6010      	str	r0, [r2, #0]
 8003f40:	7019      	strb	r1, [r3, #0]
 8003f42:	4608      	mov	r0, r1
 8003f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <__sfputs_r>:
 8003f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	460f      	mov	r7, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	18d5      	adds	r5, r2, r3
 8003f54:	42ac      	cmp	r4, r5
 8003f56:	d101      	bne.n	8003f5c <__sfputs_r+0x12>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e007      	b.n	8003f6c <__sfputs_r+0x22>
 8003f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f60:	463a      	mov	r2, r7
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ffda 	bl	8003f1c <__sfputc_r>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d1f3      	bne.n	8003f54 <__sfputs_r+0xa>
 8003f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f70 <_vfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	460d      	mov	r5, r1
 8003f76:	b09d      	sub	sp, #116	; 0x74
 8003f78:	4614      	mov	r4, r2
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	b118      	cbz	r0, 8003f88 <_vfiprintf_r+0x18>
 8003f80:	6983      	ldr	r3, [r0, #24]
 8003f82:	b90b      	cbnz	r3, 8003f88 <_vfiprintf_r+0x18>
 8003f84:	f7ff fe1c 	bl	8003bc0 <__sinit>
 8003f88:	4b89      	ldr	r3, [pc, #548]	; (80041b0 <_vfiprintf_r+0x240>)
 8003f8a:	429d      	cmp	r5, r3
 8003f8c:	d11b      	bne.n	8003fc6 <_vfiprintf_r+0x56>
 8003f8e:	6875      	ldr	r5, [r6, #4]
 8003f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_vfiprintf_r+0x32>
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_vfiprintf_r+0x32>
 8003f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f9e:	f7ff fed2 	bl	8003d46 <__retarget_lock_acquire_recursive>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	d501      	bpl.n	8003fac <_vfiprintf_r+0x3c>
 8003fa8:	692b      	ldr	r3, [r5, #16]
 8003faa:	b9eb      	cbnz	r3, 8003fe8 <_vfiprintf_r+0x78>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f000 fb5a 	bl	8004668 <__swsetup_r>
 8003fb4:	b1c0      	cbz	r0, 8003fe8 <_vfiprintf_r+0x78>
 8003fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb8:	07dc      	lsls	r4, r3, #31
 8003fba:	d50e      	bpl.n	8003fda <_vfiprintf_r+0x6a>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	b01d      	add	sp, #116	; 0x74
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <_vfiprintf_r+0x244>)
 8003fc8:	429d      	cmp	r5, r3
 8003fca:	d101      	bne.n	8003fd0 <_vfiprintf_r+0x60>
 8003fcc:	68b5      	ldr	r5, [r6, #8]
 8003fce:	e7df      	b.n	8003f90 <_vfiprintf_r+0x20>
 8003fd0:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <_vfiprintf_r+0x248>)
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	bf08      	it	eq
 8003fd6:	68f5      	ldreq	r5, [r6, #12]
 8003fd8:	e7da      	b.n	8003f90 <_vfiprintf_r+0x20>
 8003fda:	89ab      	ldrh	r3, [r5, #12]
 8003fdc:	0598      	lsls	r0, r3, #22
 8003fde:	d4ed      	bmi.n	8003fbc <_vfiprintf_r+0x4c>
 8003fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fe2:	f7ff feb1 	bl	8003d48 <__retarget_lock_release_recursive>
 8003fe6:	e7e9      	b.n	8003fbc <_vfiprintf_r+0x4c>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9309      	str	r3, [sp, #36]	; 0x24
 8003fec:	2320      	movs	r3, #32
 8003fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff6:	2330      	movs	r3, #48	; 0x30
 8003ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041bc <_vfiprintf_r+0x24c>
 8003ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004000:	f04f 0901 	mov.w	r9, #1
 8004004:	4623      	mov	r3, r4
 8004006:	469a      	mov	sl, r3
 8004008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400c:	b10a      	cbz	r2, 8004012 <_vfiprintf_r+0xa2>
 800400e:	2a25      	cmp	r2, #37	; 0x25
 8004010:	d1f9      	bne.n	8004006 <_vfiprintf_r+0x96>
 8004012:	ebba 0b04 	subs.w	fp, sl, r4
 8004016:	d00b      	beq.n	8004030 <_vfiprintf_r+0xc0>
 8004018:	465b      	mov	r3, fp
 800401a:	4622      	mov	r2, r4
 800401c:	4629      	mov	r1, r5
 800401e:	4630      	mov	r0, r6
 8004020:	f7ff ff93 	bl	8003f4a <__sfputs_r>
 8004024:	3001      	adds	r0, #1
 8004026:	f000 80aa 	beq.w	800417e <_vfiprintf_r+0x20e>
 800402a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402c:	445a      	add	r2, fp
 800402e:	9209      	str	r2, [sp, #36]	; 0x24
 8004030:	f89a 3000 	ldrb.w	r3, [sl]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a2 	beq.w	800417e <_vfiprintf_r+0x20e>
 800403a:	2300      	movs	r3, #0
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004044:	f10a 0a01 	add.w	sl, sl, #1
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	9307      	str	r3, [sp, #28]
 800404c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004050:	931a      	str	r3, [sp, #104]	; 0x68
 8004052:	4654      	mov	r4, sl
 8004054:	2205      	movs	r2, #5
 8004056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405a:	4858      	ldr	r0, [pc, #352]	; (80041bc <_vfiprintf_r+0x24c>)
 800405c:	f7fc f8e0 	bl	8000220 <memchr>
 8004060:	9a04      	ldr	r2, [sp, #16]
 8004062:	b9d8      	cbnz	r0, 800409c <_vfiprintf_r+0x12c>
 8004064:	06d1      	lsls	r1, r2, #27
 8004066:	bf44      	itt	mi
 8004068:	2320      	movmi	r3, #32
 800406a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406e:	0713      	lsls	r3, r2, #28
 8004070:	bf44      	itt	mi
 8004072:	232b      	movmi	r3, #43	; 0x2b
 8004074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004078:	f89a 3000 	ldrb.w	r3, [sl]
 800407c:	2b2a      	cmp	r3, #42	; 0x2a
 800407e:	d015      	beq.n	80040ac <_vfiprintf_r+0x13c>
 8004080:	9a07      	ldr	r2, [sp, #28]
 8004082:	4654      	mov	r4, sl
 8004084:	2000      	movs	r0, #0
 8004086:	f04f 0c0a 	mov.w	ip, #10
 800408a:	4621      	mov	r1, r4
 800408c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004090:	3b30      	subs	r3, #48	; 0x30
 8004092:	2b09      	cmp	r3, #9
 8004094:	d94e      	bls.n	8004134 <_vfiprintf_r+0x1c4>
 8004096:	b1b0      	cbz	r0, 80040c6 <_vfiprintf_r+0x156>
 8004098:	9207      	str	r2, [sp, #28]
 800409a:	e014      	b.n	80040c6 <_vfiprintf_r+0x156>
 800409c:	eba0 0308 	sub.w	r3, r0, r8
 80040a0:	fa09 f303 	lsl.w	r3, r9, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	46a2      	mov	sl, r4
 80040aa:	e7d2      	b.n	8004052 <_vfiprintf_r+0xe2>
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	1d19      	adds	r1, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	9103      	str	r1, [sp, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bfbb      	ittet	lt
 80040b8:	425b      	neglt	r3, r3
 80040ba:	f042 0202 	orrlt.w	r2, r2, #2
 80040be:	9307      	strge	r3, [sp, #28]
 80040c0:	9307      	strlt	r3, [sp, #28]
 80040c2:	bfb8      	it	lt
 80040c4:	9204      	strlt	r2, [sp, #16]
 80040c6:	7823      	ldrb	r3, [r4, #0]
 80040c8:	2b2e      	cmp	r3, #46	; 0x2e
 80040ca:	d10c      	bne.n	80040e6 <_vfiprintf_r+0x176>
 80040cc:	7863      	ldrb	r3, [r4, #1]
 80040ce:	2b2a      	cmp	r3, #42	; 0x2a
 80040d0:	d135      	bne.n	800413e <_vfiprintf_r+0x1ce>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	1d1a      	adds	r2, r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfb8      	it	lt
 80040de:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e2:	3402      	adds	r4, #2
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041cc <_vfiprintf_r+0x25c>
 80040ea:	7821      	ldrb	r1, [r4, #0]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4650      	mov	r0, sl
 80040f0:	f7fc f896 	bl	8000220 <memchr>
 80040f4:	b140      	cbz	r0, 8004108 <_vfiprintf_r+0x198>
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	eba0 000a 	sub.w	r0, r0, sl
 80040fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004100:	9b04      	ldr	r3, [sp, #16]
 8004102:	4303      	orrs	r3, r0
 8004104:	3401      	adds	r4, #1
 8004106:	9304      	str	r3, [sp, #16]
 8004108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410c:	482c      	ldr	r0, [pc, #176]	; (80041c0 <_vfiprintf_r+0x250>)
 800410e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004112:	2206      	movs	r2, #6
 8004114:	f7fc f884 	bl	8000220 <memchr>
 8004118:	2800      	cmp	r0, #0
 800411a:	d03f      	beq.n	800419c <_vfiprintf_r+0x22c>
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <_vfiprintf_r+0x254>)
 800411e:	bb1b      	cbnz	r3, 8004168 <_vfiprintf_r+0x1f8>
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	3307      	adds	r3, #7
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	3308      	adds	r3, #8
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412e:	443b      	add	r3, r7
 8004130:	9309      	str	r3, [sp, #36]	; 0x24
 8004132:	e767      	b.n	8004004 <_vfiprintf_r+0x94>
 8004134:	fb0c 3202 	mla	r2, ip, r2, r3
 8004138:	460c      	mov	r4, r1
 800413a:	2001      	movs	r0, #1
 800413c:	e7a5      	b.n	800408a <_vfiprintf_r+0x11a>
 800413e:	2300      	movs	r3, #0
 8004140:	3401      	adds	r4, #1
 8004142:	9305      	str	r3, [sp, #20]
 8004144:	4619      	mov	r1, r3
 8004146:	f04f 0c0a 	mov.w	ip, #10
 800414a:	4620      	mov	r0, r4
 800414c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004150:	3a30      	subs	r2, #48	; 0x30
 8004152:	2a09      	cmp	r2, #9
 8004154:	d903      	bls.n	800415e <_vfiprintf_r+0x1ee>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c5      	beq.n	80040e6 <_vfiprintf_r+0x176>
 800415a:	9105      	str	r1, [sp, #20]
 800415c:	e7c3      	b.n	80040e6 <_vfiprintf_r+0x176>
 800415e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004162:	4604      	mov	r4, r0
 8004164:	2301      	movs	r3, #1
 8004166:	e7f0      	b.n	800414a <_vfiprintf_r+0x1da>
 8004168:	ab03      	add	r3, sp, #12
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	462a      	mov	r2, r5
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <_vfiprintf_r+0x258>)
 8004170:	a904      	add	r1, sp, #16
 8004172:	4630      	mov	r0, r6
 8004174:	f3af 8000 	nop.w
 8004178:	4607      	mov	r7, r0
 800417a:	1c78      	adds	r0, r7, #1
 800417c:	d1d6      	bne.n	800412c <_vfiprintf_r+0x1bc>
 800417e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004180:	07d9      	lsls	r1, r3, #31
 8004182:	d405      	bmi.n	8004190 <_vfiprintf_r+0x220>
 8004184:	89ab      	ldrh	r3, [r5, #12]
 8004186:	059a      	lsls	r2, r3, #22
 8004188:	d402      	bmi.n	8004190 <_vfiprintf_r+0x220>
 800418a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800418c:	f7ff fddc 	bl	8003d48 <__retarget_lock_release_recursive>
 8004190:	89ab      	ldrh	r3, [r5, #12]
 8004192:	065b      	lsls	r3, r3, #25
 8004194:	f53f af12 	bmi.w	8003fbc <_vfiprintf_r+0x4c>
 8004198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800419a:	e711      	b.n	8003fc0 <_vfiprintf_r+0x50>
 800419c:	ab03      	add	r3, sp, #12
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	462a      	mov	r2, r5
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <_vfiprintf_r+0x258>)
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	4630      	mov	r0, r6
 80041a8:	f000 f880 	bl	80042ac <_printf_i>
 80041ac:	e7e4      	b.n	8004178 <_vfiprintf_r+0x208>
 80041ae:	bf00      	nop
 80041b0:	08004c30 	.word	0x08004c30
 80041b4:	08004c50 	.word	0x08004c50
 80041b8:	08004c10 	.word	0x08004c10
 80041bc:	08004c70 	.word	0x08004c70
 80041c0:	08004c7a 	.word	0x08004c7a
 80041c4:	00000000 	.word	0x00000000
 80041c8:	08003f4b 	.word	0x08003f4b
 80041cc:	08004c76 	.word	0x08004c76

080041d0 <_printf_common>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	4616      	mov	r6, r2
 80041d6:	4699      	mov	r9, r3
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bfb8      	it	lt
 80041e4:	4613      	movlt	r3, r2
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ec:	4607      	mov	r7, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b10a      	cbz	r2, 80041f6 <_printf_common+0x26>
 80041f2:	3301      	adds	r3, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	6833      	ldrmi	r3, [r6, #0]
 80041fe:	3302      	addmi	r3, #2
 8004200:	6033      	strmi	r3, [r6, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	f015 0506 	ands.w	r5, r5, #6
 8004208:	d106      	bne.n	8004218 <_printf_common+0x48>
 800420a:	f104 0a19 	add.w	sl, r4, #25
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	6832      	ldr	r2, [r6, #0]
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	42ab      	cmp	r3, r5
 8004216:	dc26      	bgt.n	8004266 <_printf_common+0x96>
 8004218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800421c:	1e13      	subs	r3, r2, #0
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	bf18      	it	ne
 8004222:	2301      	movne	r3, #1
 8004224:	0692      	lsls	r2, r2, #26
 8004226:	d42b      	bmi.n	8004280 <_printf_common+0xb0>
 8004228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800422c:	4649      	mov	r1, r9
 800422e:	4638      	mov	r0, r7
 8004230:	47c0      	blx	r8
 8004232:	3001      	adds	r0, #1
 8004234:	d01e      	beq.n	8004274 <_printf_common+0xa4>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	68e5      	ldr	r5, [r4, #12]
 800423a:	6832      	ldr	r2, [r6, #0]
 800423c:	f003 0306 	and.w	r3, r3, #6
 8004240:	2b04      	cmp	r3, #4
 8004242:	bf08      	it	eq
 8004244:	1aad      	subeq	r5, r5, r2
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	bf0c      	ite	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	2500      	movne	r5, #0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfc4      	itt	gt
 8004256:	1a9b      	subgt	r3, r3, r2
 8004258:	18ed      	addgt	r5, r5, r3
 800425a:	2600      	movs	r6, #0
 800425c:	341a      	adds	r4, #26
 800425e:	42b5      	cmp	r5, r6
 8004260:	d11a      	bne.n	8004298 <_printf_common+0xc8>
 8004262:	2000      	movs	r0, #0
 8004264:	e008      	b.n	8004278 <_printf_common+0xa8>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4649      	mov	r1, r9
 800426c:	4638      	mov	r0, r7
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d103      	bne.n	800427c <_printf_common+0xac>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	3501      	adds	r5, #1
 800427e:	e7c6      	b.n	800420e <_printf_common+0x3e>
 8004280:	18e1      	adds	r1, r4, r3
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	2030      	movs	r0, #48	; 0x30
 8004286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800428a:	4422      	add	r2, r4
 800428c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004294:	3302      	adds	r3, #2
 8004296:	e7c7      	b.n	8004228 <_printf_common+0x58>
 8004298:	2301      	movs	r3, #1
 800429a:	4622      	mov	r2, r4
 800429c:	4649      	mov	r1, r9
 800429e:	4638      	mov	r0, r7
 80042a0:	47c0      	blx	r8
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0e6      	beq.n	8004274 <_printf_common+0xa4>
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7d9      	b.n	800425e <_printf_common+0x8e>
	...

080042ac <_printf_i>:
 80042ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	7e0f      	ldrb	r7, [r1, #24]
 80042b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b4:	2f78      	cmp	r7, #120	; 0x78
 80042b6:	4691      	mov	r9, r2
 80042b8:	4680      	mov	r8, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	469a      	mov	sl, r3
 80042be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042c2:	d807      	bhi.n	80042d4 <_printf_i+0x28>
 80042c4:	2f62      	cmp	r7, #98	; 0x62
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x32>
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f000 80d8 	beq.w	800447e <_printf_i+0x1d2>
 80042ce:	2f58      	cmp	r7, #88	; 0x58
 80042d0:	f000 80a3 	beq.w	800441a <_printf_i+0x16e>
 80042d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042dc:	e03a      	b.n	8004354 <_printf_i+0xa8>
 80042de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042e2:	2b15      	cmp	r3, #21
 80042e4:	d8f6      	bhi.n	80042d4 <_printf_i+0x28>
 80042e6:	a101      	add	r1, pc, #4	; (adr r1, 80042ec <_printf_i+0x40>)
 80042e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004359 	.word	0x08004359
 80042f4:	080042d5 	.word	0x080042d5
 80042f8:	080042d5 	.word	0x080042d5
 80042fc:	080042d5 	.word	0x080042d5
 8004300:	080042d5 	.word	0x080042d5
 8004304:	08004359 	.word	0x08004359
 8004308:	080042d5 	.word	0x080042d5
 800430c:	080042d5 	.word	0x080042d5
 8004310:	080042d5 	.word	0x080042d5
 8004314:	080042d5 	.word	0x080042d5
 8004318:	08004465 	.word	0x08004465
 800431c:	08004389 	.word	0x08004389
 8004320:	08004447 	.word	0x08004447
 8004324:	080042d5 	.word	0x080042d5
 8004328:	080042d5 	.word	0x080042d5
 800432c:	08004487 	.word	0x08004487
 8004330:	080042d5 	.word	0x080042d5
 8004334:	08004389 	.word	0x08004389
 8004338:	080042d5 	.word	0x080042d5
 800433c:	080042d5 	.word	0x080042d5
 8004340:	0800444f 	.word	0x0800444f
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004354:	2301      	movs	r3, #1
 8004356:	e0a3      	b.n	80044a0 <_printf_i+0x1f4>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	6829      	ldr	r1, [r5, #0]
 800435c:	0606      	lsls	r6, r0, #24
 800435e:	f101 0304 	add.w	r3, r1, #4
 8004362:	d50a      	bpl.n	800437a <_printf_i+0xce>
 8004364:	680e      	ldr	r6, [r1, #0]
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	2e00      	cmp	r6, #0
 800436a:	da03      	bge.n	8004374 <_printf_i+0xc8>
 800436c:	232d      	movs	r3, #45	; 0x2d
 800436e:	4276      	negs	r6, r6
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004374:	485e      	ldr	r0, [pc, #376]	; (80044f0 <_printf_i+0x244>)
 8004376:	230a      	movs	r3, #10
 8004378:	e019      	b.n	80043ae <_printf_i+0x102>
 800437a:	680e      	ldr	r6, [r1, #0]
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004382:	bf18      	it	ne
 8004384:	b236      	sxthne	r6, r6
 8004386:	e7ef      	b.n	8004368 <_printf_i+0xbc>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	1d19      	adds	r1, r3, #4
 800438e:	6029      	str	r1, [r5, #0]
 8004390:	0601      	lsls	r1, r0, #24
 8004392:	d501      	bpl.n	8004398 <_printf_i+0xec>
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	e002      	b.n	800439e <_printf_i+0xf2>
 8004398:	0646      	lsls	r6, r0, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0xe8>
 800439c:	881e      	ldrh	r6, [r3, #0]
 800439e:	4854      	ldr	r0, [pc, #336]	; (80044f0 <_printf_i+0x244>)
 80043a0:	2f6f      	cmp	r7, #111	; 0x6f
 80043a2:	bf0c      	ite	eq
 80043a4:	2308      	moveq	r3, #8
 80043a6:	230a      	movne	r3, #10
 80043a8:	2100      	movs	r1, #0
 80043aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ae:	6865      	ldr	r5, [r4, #4]
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	bfa2      	ittt	ge
 80043b6:	6821      	ldrge	r1, [r4, #0]
 80043b8:	f021 0104 	bicge.w	r1, r1, #4
 80043bc:	6021      	strge	r1, [r4, #0]
 80043be:	b90e      	cbnz	r6, 80043c4 <_printf_i+0x118>
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d04d      	beq.n	8004460 <_printf_i+0x1b4>
 80043c4:	4615      	mov	r5, r2
 80043c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ca:	fb03 6711 	mls	r7, r3, r1, r6
 80043ce:	5dc7      	ldrb	r7, [r0, r7]
 80043d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043d4:	4637      	mov	r7, r6
 80043d6:	42bb      	cmp	r3, r7
 80043d8:	460e      	mov	r6, r1
 80043da:	d9f4      	bls.n	80043c6 <_printf_i+0x11a>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10b      	bne.n	80043f8 <_printf_i+0x14c>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07de      	lsls	r6, r3, #31
 80043e4:	d508      	bpl.n	80043f8 <_printf_i+0x14c>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	6861      	ldr	r1, [r4, #4]
 80043ea:	4299      	cmp	r1, r3
 80043ec:	bfde      	ittt	le
 80043ee:	2330      	movle	r3, #48	; 0x30
 80043f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043f8:	1b52      	subs	r2, r2, r5
 80043fa:	6122      	str	r2, [r4, #16]
 80043fc:	f8cd a000 	str.w	sl, [sp]
 8004400:	464b      	mov	r3, r9
 8004402:	aa03      	add	r2, sp, #12
 8004404:	4621      	mov	r1, r4
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fee2 	bl	80041d0 <_printf_common>
 800440c:	3001      	adds	r0, #1
 800440e:	d14c      	bne.n	80044aa <_printf_i+0x1fe>
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	b004      	add	sp, #16
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	4835      	ldr	r0, [pc, #212]	; (80044f0 <_printf_i+0x244>)
 800441c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f851 6b04 	ldr.w	r6, [r1], #4
 8004428:	6029      	str	r1, [r5, #0]
 800442a:	061d      	lsls	r5, r3, #24
 800442c:	d514      	bpl.n	8004458 <_printf_i+0x1ac>
 800442e:	07df      	lsls	r7, r3, #31
 8004430:	bf44      	itt	mi
 8004432:	f043 0320 	orrmi.w	r3, r3, #32
 8004436:	6023      	strmi	r3, [r4, #0]
 8004438:	b91e      	cbnz	r6, 8004442 <_printf_i+0x196>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f023 0320 	bic.w	r3, r3, #32
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	2310      	movs	r3, #16
 8004444:	e7b0      	b.n	80043a8 <_printf_i+0xfc>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	2378      	movs	r3, #120	; 0x78
 8004450:	4828      	ldr	r0, [pc, #160]	; (80044f4 <_printf_i+0x248>)
 8004452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004456:	e7e3      	b.n	8004420 <_printf_i+0x174>
 8004458:	0659      	lsls	r1, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2b6      	uxthmi	r6, r6
 800445e:	e7e6      	b.n	800442e <_printf_i+0x182>
 8004460:	4615      	mov	r5, r2
 8004462:	e7bb      	b.n	80043dc <_printf_i+0x130>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	6826      	ldr	r6, [r4, #0]
 8004468:	6961      	ldr	r1, [r4, #20]
 800446a:	1d18      	adds	r0, r3, #4
 800446c:	6028      	str	r0, [r5, #0]
 800446e:	0635      	lsls	r5, r6, #24
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	d501      	bpl.n	8004478 <_printf_i+0x1cc>
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	e002      	b.n	800447e <_printf_i+0x1d2>
 8004478:	0670      	lsls	r0, r6, #25
 800447a:	d5fb      	bpl.n	8004474 <_printf_i+0x1c8>
 800447c:	8019      	strh	r1, [r3, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	4615      	mov	r5, r2
 8004484:	e7ba      	b.n	80043fc <_printf_i+0x150>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	602a      	str	r2, [r5, #0]
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	2100      	movs	r1, #0
 8004492:	4628      	mov	r0, r5
 8004494:	f7fb fec4 	bl	8000220 <memchr>
 8004498:	b108      	cbz	r0, 800449e <_printf_i+0x1f2>
 800449a:	1b40      	subs	r0, r0, r5
 800449c:	6060      	str	r0, [r4, #4]
 800449e:	6863      	ldr	r3, [r4, #4]
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	2300      	movs	r3, #0
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a8:	e7a8      	b.n	80043fc <_printf_i+0x150>
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	462a      	mov	r2, r5
 80044ae:	4649      	mov	r1, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	47d0      	blx	sl
 80044b4:	3001      	adds	r0, #1
 80044b6:	d0ab      	beq.n	8004410 <_printf_i+0x164>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	079b      	lsls	r3, r3, #30
 80044bc:	d413      	bmi.n	80044e6 <_printf_i+0x23a>
 80044be:	68e0      	ldr	r0, [r4, #12]
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	4298      	cmp	r0, r3
 80044c4:	bfb8      	it	lt
 80044c6:	4618      	movlt	r0, r3
 80044c8:	e7a4      	b.n	8004414 <_printf_i+0x168>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4632      	mov	r2, r6
 80044ce:	4649      	mov	r1, r9
 80044d0:	4640      	mov	r0, r8
 80044d2:	47d0      	blx	sl
 80044d4:	3001      	adds	r0, #1
 80044d6:	d09b      	beq.n	8004410 <_printf_i+0x164>
 80044d8:	3501      	adds	r5, #1
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	9903      	ldr	r1, [sp, #12]
 80044de:	1a5b      	subs	r3, r3, r1
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dcf2      	bgt.n	80044ca <_printf_i+0x21e>
 80044e4:	e7eb      	b.n	80044be <_printf_i+0x212>
 80044e6:	2500      	movs	r5, #0
 80044e8:	f104 0619 	add.w	r6, r4, #25
 80044ec:	e7f5      	b.n	80044da <_printf_i+0x22e>
 80044ee:	bf00      	nop
 80044f0:	08004c81 	.word	0x08004c81
 80044f4:	08004c92 	.word	0x08004c92

080044f8 <_sbrk_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d06      	ldr	r5, [pc, #24]	; (8004514 <_sbrk_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fb5e 	bl	8000bc4 <_sbrk>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_sbrk_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_sbrk_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000144 	.word	0x20000144

08004518 <__sread>:
 8004518:	b510      	push	{r4, lr}
 800451a:	460c      	mov	r4, r1
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	f000 fa6e 	bl	8004a00 <_read_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	bfab      	itete	ge
 8004528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800452a:	89a3      	ldrhlt	r3, [r4, #12]
 800452c:	181b      	addge	r3, r3, r0
 800452e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004532:	bfac      	ite	ge
 8004534:	6563      	strge	r3, [r4, #84]	; 0x54
 8004536:	81a3      	strhlt	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__swrite>:
 800453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453e:	461f      	mov	r7, r3
 8004540:	898b      	ldrh	r3, [r1, #12]
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	4605      	mov	r5, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4616      	mov	r6, r2
 800454a:	d505      	bpl.n	8004558 <__swrite+0x1e>
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	2302      	movs	r3, #2
 8004552:	2200      	movs	r2, #0
 8004554:	f000 f9d0 	bl	80048f8 <_lseek_r>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800455e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strh	r3, [r4, #12]
 8004564:	4632      	mov	r2, r6
 8004566:	463b      	mov	r3, r7
 8004568:	4628      	mov	r0, r5
 800456a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	f000 b869 	b.w	8004644 <_write_r>

08004572 <__sseek>:
 8004572:	b510      	push	{r4, lr}
 8004574:	460c      	mov	r4, r1
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 f9bd 	bl	80048f8 <_lseek_r>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	bf15      	itete	ne
 8004584:	6560      	strne	r0, [r4, #84]	; 0x54
 8004586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800458a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800458e:	81a3      	strheq	r3, [r4, #12]
 8004590:	bf18      	it	ne
 8004592:	81a3      	strhne	r3, [r4, #12]
 8004594:	bd10      	pop	{r4, pc}

08004596 <__sclose>:
 8004596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459a:	f000 b8db 	b.w	8004754 <_close_r>
	...

080045a0 <__swbuf_r>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	460e      	mov	r6, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	4605      	mov	r5, r0
 80045a8:	b118      	cbz	r0, 80045b2 <__swbuf_r+0x12>
 80045aa:	6983      	ldr	r3, [r0, #24]
 80045ac:	b90b      	cbnz	r3, 80045b2 <__swbuf_r+0x12>
 80045ae:	f7ff fb07 	bl	8003bc0 <__sinit>
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <__swbuf_r+0x98>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d12b      	bne.n	8004610 <__swbuf_r+0x70>
 80045b8:	686c      	ldr	r4, [r5, #4]
 80045ba:	69a3      	ldr	r3, [r4, #24]
 80045bc:	60a3      	str	r3, [r4, #8]
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	071a      	lsls	r2, r3, #28
 80045c2:	d52f      	bpl.n	8004624 <__swbuf_r+0x84>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	b36b      	cbz	r3, 8004624 <__swbuf_r+0x84>
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1ac0      	subs	r0, r0, r3
 80045ce:	6963      	ldr	r3, [r4, #20]
 80045d0:	b2f6      	uxtb	r6, r6
 80045d2:	4283      	cmp	r3, r0
 80045d4:	4637      	mov	r7, r6
 80045d6:	dc04      	bgt.n	80045e2 <__swbuf_r+0x42>
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f950 	bl	8004880 <_fflush_r>
 80045e0:	bb30      	cbnz	r0, 8004630 <__swbuf_r+0x90>
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	701e      	strb	r6, [r3, #0]
 80045f0:	6963      	ldr	r3, [r4, #20]
 80045f2:	3001      	adds	r0, #1
 80045f4:	4283      	cmp	r3, r0
 80045f6:	d004      	beq.n	8004602 <__swbuf_r+0x62>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	07db      	lsls	r3, r3, #31
 80045fc:	d506      	bpl.n	800460c <__swbuf_r+0x6c>
 80045fe:	2e0a      	cmp	r6, #10
 8004600:	d104      	bne.n	800460c <__swbuf_r+0x6c>
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f000 f93b 	bl	8004880 <_fflush_r>
 800460a:	b988      	cbnz	r0, 8004630 <__swbuf_r+0x90>
 800460c:	4638      	mov	r0, r7
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <__swbuf_r+0x9c>)
 8004612:	429c      	cmp	r4, r3
 8004614:	d101      	bne.n	800461a <__swbuf_r+0x7a>
 8004616:	68ac      	ldr	r4, [r5, #8]
 8004618:	e7cf      	b.n	80045ba <__swbuf_r+0x1a>
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <__swbuf_r+0xa0>)
 800461c:	429c      	cmp	r4, r3
 800461e:	bf08      	it	eq
 8004620:	68ec      	ldreq	r4, [r5, #12]
 8004622:	e7ca      	b.n	80045ba <__swbuf_r+0x1a>
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f81e 	bl	8004668 <__swsetup_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	d0cb      	beq.n	80045c8 <__swbuf_r+0x28>
 8004630:	f04f 37ff 	mov.w	r7, #4294967295
 8004634:	e7ea      	b.n	800460c <__swbuf_r+0x6c>
 8004636:	bf00      	nop
 8004638:	08004c30 	.word	0x08004c30
 800463c:	08004c50 	.word	0x08004c50
 8004640:	08004c10 	.word	0x08004c10

08004644 <_write_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d07      	ldr	r5, [pc, #28]	; (8004664 <_write_r+0x20>)
 8004648:	4604      	mov	r4, r0
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	2200      	movs	r2, #0
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc fa65 	bl	8000b22 <_write>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_write_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_write_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000144 	.word	0x20000144

08004668 <__swsetup_r>:
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <__swsetup_r+0xcc>)
 800466a:	b570      	push	{r4, r5, r6, lr}
 800466c:	681d      	ldr	r5, [r3, #0]
 800466e:	4606      	mov	r6, r0
 8004670:	460c      	mov	r4, r1
 8004672:	b125      	cbz	r5, 800467e <__swsetup_r+0x16>
 8004674:	69ab      	ldr	r3, [r5, #24]
 8004676:	b913      	cbnz	r3, 800467e <__swsetup_r+0x16>
 8004678:	4628      	mov	r0, r5
 800467a:	f7ff faa1 	bl	8003bc0 <__sinit>
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <__swsetup_r+0xd0>)
 8004680:	429c      	cmp	r4, r3
 8004682:	d10f      	bne.n	80046a4 <__swsetup_r+0x3c>
 8004684:	686c      	ldr	r4, [r5, #4]
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800468c:	0719      	lsls	r1, r3, #28
 800468e:	d42c      	bmi.n	80046ea <__swsetup_r+0x82>
 8004690:	06dd      	lsls	r5, r3, #27
 8004692:	d411      	bmi.n	80046b8 <__swsetup_r+0x50>
 8004694:	2309      	movs	r3, #9
 8004696:	6033      	str	r3, [r6, #0]
 8004698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	f04f 30ff 	mov.w	r0, #4294967295
 80046a2:	e03e      	b.n	8004722 <__swsetup_r+0xba>
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <__swsetup_r+0xd4>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	d101      	bne.n	80046ae <__swsetup_r+0x46>
 80046aa:	68ac      	ldr	r4, [r5, #8]
 80046ac:	e7eb      	b.n	8004686 <__swsetup_r+0x1e>
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <__swsetup_r+0xd8>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	bf08      	it	eq
 80046b4:	68ec      	ldreq	r4, [r5, #12]
 80046b6:	e7e6      	b.n	8004686 <__swsetup_r+0x1e>
 80046b8:	0758      	lsls	r0, r3, #29
 80046ba:	d512      	bpl.n	80046e2 <__swsetup_r+0x7a>
 80046bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046be:	b141      	cbz	r1, 80046d2 <__swsetup_r+0x6a>
 80046c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046c4:	4299      	cmp	r1, r3
 80046c6:	d002      	beq.n	80046ce <__swsetup_r+0x66>
 80046c8:	4630      	mov	r0, r6
 80046ca:	f7ff fb47 	bl	8003d5c <_free_r>
 80046ce:	2300      	movs	r3, #0
 80046d0:	6363      	str	r3, [r4, #52]	; 0x34
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f043 0308 	orr.w	r3, r3, #8
 80046e8:	81a3      	strh	r3, [r4, #12]
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	b94b      	cbnz	r3, 8004702 <__swsetup_r+0x9a>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d003      	beq.n	8004702 <__swsetup_r+0x9a>
 80046fa:	4621      	mov	r1, r4
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f933 	bl	8004968 <__smakebuf_r>
 8004702:	89a0      	ldrh	r0, [r4, #12]
 8004704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004708:	f010 0301 	ands.w	r3, r0, #1
 800470c:	d00a      	beq.n	8004724 <__swsetup_r+0xbc>
 800470e:	2300      	movs	r3, #0
 8004710:	60a3      	str	r3, [r4, #8]
 8004712:	6963      	ldr	r3, [r4, #20]
 8004714:	425b      	negs	r3, r3
 8004716:	61a3      	str	r3, [r4, #24]
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	b943      	cbnz	r3, 800472e <__swsetup_r+0xc6>
 800471c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004720:	d1ba      	bne.n	8004698 <__swsetup_r+0x30>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	0781      	lsls	r1, r0, #30
 8004726:	bf58      	it	pl
 8004728:	6963      	ldrpl	r3, [r4, #20]
 800472a:	60a3      	str	r3, [r4, #8]
 800472c:	e7f4      	b.n	8004718 <__swsetup_r+0xb0>
 800472e:	2000      	movs	r0, #0
 8004730:	e7f7      	b.n	8004722 <__swsetup_r+0xba>
 8004732:	bf00      	nop
 8004734:	2000000c 	.word	0x2000000c
 8004738:	08004c30 	.word	0x08004c30
 800473c:	08004c50 	.word	0x08004c50
 8004740:	08004c10 	.word	0x08004c10

08004744 <abort>:
 8004744:	b508      	push	{r3, lr}
 8004746:	2006      	movs	r0, #6
 8004748:	f000 f994 	bl	8004a74 <raise>
 800474c:	2001      	movs	r0, #1
 800474e:	f7fc f9c1 	bl	8000ad4 <_exit>
	...

08004754 <_close_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d06      	ldr	r5, [pc, #24]	; (8004770 <_close_r+0x1c>)
 8004758:	2300      	movs	r3, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	f7fc f9fb 	bl	8000b5a <_close>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_close_r+0x1a>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_close_r+0x1a>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	20000144 	.word	0x20000144

08004774 <__sflush_r>:
 8004774:	898a      	ldrh	r2, [r1, #12]
 8004776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477a:	4605      	mov	r5, r0
 800477c:	0710      	lsls	r0, r2, #28
 800477e:	460c      	mov	r4, r1
 8004780:	d458      	bmi.n	8004834 <__sflush_r+0xc0>
 8004782:	684b      	ldr	r3, [r1, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	dc05      	bgt.n	8004794 <__sflush_r+0x20>
 8004788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	dc02      	bgt.n	8004794 <__sflush_r+0x20>
 800478e:	2000      	movs	r0, #0
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004796:	2e00      	cmp	r6, #0
 8004798:	d0f9      	beq.n	800478e <__sflush_r+0x1a>
 800479a:	2300      	movs	r3, #0
 800479c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047a0:	682f      	ldr	r7, [r5, #0]
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	d032      	beq.n	800480c <__sflush_r+0x98>
 80047a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	075a      	lsls	r2, r3, #29
 80047ac:	d505      	bpl.n	80047ba <__sflush_r+0x46>
 80047ae:	6863      	ldr	r3, [r4, #4]
 80047b0:	1ac0      	subs	r0, r0, r3
 80047b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047b4:	b10b      	cbz	r3, 80047ba <__sflush_r+0x46>
 80047b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b8:	1ac0      	subs	r0, r0, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	4602      	mov	r2, r0
 80047be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c0:	6a21      	ldr	r1, [r4, #32]
 80047c2:	4628      	mov	r0, r5
 80047c4:	47b0      	blx	r6
 80047c6:	1c43      	adds	r3, r0, #1
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	d106      	bne.n	80047da <__sflush_r+0x66>
 80047cc:	6829      	ldr	r1, [r5, #0]
 80047ce:	291d      	cmp	r1, #29
 80047d0:	d82c      	bhi.n	800482c <__sflush_r+0xb8>
 80047d2:	4a2a      	ldr	r2, [pc, #168]	; (800487c <__sflush_r+0x108>)
 80047d4:	40ca      	lsrs	r2, r1
 80047d6:	07d6      	lsls	r6, r2, #31
 80047d8:	d528      	bpl.n	800482c <__sflush_r+0xb8>
 80047da:	2200      	movs	r2, #0
 80047dc:	6062      	str	r2, [r4, #4]
 80047de:	04d9      	lsls	r1, r3, #19
 80047e0:	6922      	ldr	r2, [r4, #16]
 80047e2:	6022      	str	r2, [r4, #0]
 80047e4:	d504      	bpl.n	80047f0 <__sflush_r+0x7c>
 80047e6:	1c42      	adds	r2, r0, #1
 80047e8:	d101      	bne.n	80047ee <__sflush_r+0x7a>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	b903      	cbnz	r3, 80047f0 <__sflush_r+0x7c>
 80047ee:	6560      	str	r0, [r4, #84]	; 0x54
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	602f      	str	r7, [r5, #0]
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d0ca      	beq.n	800478e <__sflush_r+0x1a>
 80047f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047fc:	4299      	cmp	r1, r3
 80047fe:	d002      	beq.n	8004806 <__sflush_r+0x92>
 8004800:	4628      	mov	r0, r5
 8004802:	f7ff faab 	bl	8003d5c <_free_r>
 8004806:	2000      	movs	r0, #0
 8004808:	6360      	str	r0, [r4, #52]	; 0x34
 800480a:	e7c1      	b.n	8004790 <__sflush_r+0x1c>
 800480c:	6a21      	ldr	r1, [r4, #32]
 800480e:	2301      	movs	r3, #1
 8004810:	4628      	mov	r0, r5
 8004812:	47b0      	blx	r6
 8004814:	1c41      	adds	r1, r0, #1
 8004816:	d1c7      	bne.n	80047a8 <__sflush_r+0x34>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0c4      	beq.n	80047a8 <__sflush_r+0x34>
 800481e:	2b1d      	cmp	r3, #29
 8004820:	d001      	beq.n	8004826 <__sflush_r+0xb2>
 8004822:	2b16      	cmp	r3, #22
 8004824:	d101      	bne.n	800482a <__sflush_r+0xb6>
 8004826:	602f      	str	r7, [r5, #0]
 8004828:	e7b1      	b.n	800478e <__sflush_r+0x1a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	e7ad      	b.n	8004790 <__sflush_r+0x1c>
 8004834:	690f      	ldr	r7, [r1, #16]
 8004836:	2f00      	cmp	r7, #0
 8004838:	d0a9      	beq.n	800478e <__sflush_r+0x1a>
 800483a:	0793      	lsls	r3, r2, #30
 800483c:	680e      	ldr	r6, [r1, #0]
 800483e:	bf08      	it	eq
 8004840:	694b      	ldreq	r3, [r1, #20]
 8004842:	600f      	str	r7, [r1, #0]
 8004844:	bf18      	it	ne
 8004846:	2300      	movne	r3, #0
 8004848:	eba6 0807 	sub.w	r8, r6, r7
 800484c:	608b      	str	r3, [r1, #8]
 800484e:	f1b8 0f00 	cmp.w	r8, #0
 8004852:	dd9c      	ble.n	800478e <__sflush_r+0x1a>
 8004854:	6a21      	ldr	r1, [r4, #32]
 8004856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004858:	4643      	mov	r3, r8
 800485a:	463a      	mov	r2, r7
 800485c:	4628      	mov	r0, r5
 800485e:	47b0      	blx	r6
 8004860:	2800      	cmp	r0, #0
 8004862:	dc06      	bgt.n	8004872 <__sflush_r+0xfe>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486a:	81a3      	strh	r3, [r4, #12]
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	e78e      	b.n	8004790 <__sflush_r+0x1c>
 8004872:	4407      	add	r7, r0
 8004874:	eba8 0800 	sub.w	r8, r8, r0
 8004878:	e7e9      	b.n	800484e <__sflush_r+0xda>
 800487a:	bf00      	nop
 800487c:	20400001 	.word	0x20400001

08004880 <_fflush_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	4605      	mov	r5, r0
 8004886:	460c      	mov	r4, r1
 8004888:	b913      	cbnz	r3, 8004890 <_fflush_r+0x10>
 800488a:	2500      	movs	r5, #0
 800488c:	4628      	mov	r0, r5
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	b118      	cbz	r0, 800489a <_fflush_r+0x1a>
 8004892:	6983      	ldr	r3, [r0, #24]
 8004894:	b90b      	cbnz	r3, 800489a <_fflush_r+0x1a>
 8004896:	f7ff f993 	bl	8003bc0 <__sinit>
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <_fflush_r+0x6c>)
 800489c:	429c      	cmp	r4, r3
 800489e:	d11b      	bne.n	80048d8 <_fflush_r+0x58>
 80048a0:	686c      	ldr	r4, [r5, #4]
 80048a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ef      	beq.n	800488a <_fflush_r+0xa>
 80048aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048ac:	07d0      	lsls	r0, r2, #31
 80048ae:	d404      	bmi.n	80048ba <_fflush_r+0x3a>
 80048b0:	0599      	lsls	r1, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_fflush_r+0x3a>
 80048b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b6:	f7ff fa46 	bl	8003d46 <__retarget_lock_acquire_recursive>
 80048ba:	4628      	mov	r0, r5
 80048bc:	4621      	mov	r1, r4
 80048be:	f7ff ff59 	bl	8004774 <__sflush_r>
 80048c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048c4:	07da      	lsls	r2, r3, #31
 80048c6:	4605      	mov	r5, r0
 80048c8:	d4e0      	bmi.n	800488c <_fflush_r+0xc>
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	059b      	lsls	r3, r3, #22
 80048ce:	d4dd      	bmi.n	800488c <_fflush_r+0xc>
 80048d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d2:	f7ff fa39 	bl	8003d48 <__retarget_lock_release_recursive>
 80048d6:	e7d9      	b.n	800488c <_fflush_r+0xc>
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <_fflush_r+0x70>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d101      	bne.n	80048e2 <_fflush_r+0x62>
 80048de:	68ac      	ldr	r4, [r5, #8]
 80048e0:	e7df      	b.n	80048a2 <_fflush_r+0x22>
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <_fflush_r+0x74>)
 80048e4:	429c      	cmp	r4, r3
 80048e6:	bf08      	it	eq
 80048e8:	68ec      	ldreq	r4, [r5, #12]
 80048ea:	e7da      	b.n	80048a2 <_fflush_r+0x22>
 80048ec:	08004c30 	.word	0x08004c30
 80048f0:	08004c50 	.word	0x08004c50
 80048f4:	08004c10 	.word	0x08004c10

080048f8 <_lseek_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d07      	ldr	r5, [pc, #28]	; (8004918 <_lseek_r+0x20>)
 80048fc:	4604      	mov	r4, r0
 80048fe:	4608      	mov	r0, r1
 8004900:	4611      	mov	r1, r2
 8004902:	2200      	movs	r2, #0
 8004904:	602a      	str	r2, [r5, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f7fc f94e 	bl	8000ba8 <_lseek>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_lseek_r+0x1e>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_lseek_r+0x1e>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	20000144 	.word	0x20000144

0800491c <__swhatbuf_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	460e      	mov	r6, r1
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2900      	cmp	r1, #0
 8004926:	b096      	sub	sp, #88	; 0x58
 8004928:	4614      	mov	r4, r2
 800492a:	461d      	mov	r5, r3
 800492c:	da08      	bge.n	8004940 <__swhatbuf_r+0x24>
 800492e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	061a      	lsls	r2, r3, #24
 8004938:	d410      	bmi.n	800495c <__swhatbuf_r+0x40>
 800493a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493e:	e00e      	b.n	800495e <__swhatbuf_r+0x42>
 8004940:	466a      	mov	r2, sp
 8004942:	f000 f8b3 	bl	8004aac <_fstat_r>
 8004946:	2800      	cmp	r0, #0
 8004948:	dbf1      	blt.n	800492e <__swhatbuf_r+0x12>
 800494a:	9a01      	ldr	r2, [sp, #4]
 800494c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004954:	425a      	negs	r2, r3
 8004956:	415a      	adcs	r2, r3
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	e7ee      	b.n	800493a <__swhatbuf_r+0x1e>
 800495c:	2340      	movs	r3, #64	; 0x40
 800495e:	2000      	movs	r0, #0
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	b016      	add	sp, #88	; 0x58
 8004964:	bd70      	pop	{r4, r5, r6, pc}
	...

08004968 <__smakebuf_r>:
 8004968:	898b      	ldrh	r3, [r1, #12]
 800496a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800496c:	079d      	lsls	r5, r3, #30
 800496e:	4606      	mov	r6, r0
 8004970:	460c      	mov	r4, r1
 8004972:	d507      	bpl.n	8004984 <__smakebuf_r+0x1c>
 8004974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2301      	movs	r3, #1
 800497e:	6163      	str	r3, [r4, #20]
 8004980:	b002      	add	sp, #8
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	ab01      	add	r3, sp, #4
 8004986:	466a      	mov	r2, sp
 8004988:	f7ff ffc8 	bl	800491c <__swhatbuf_r>
 800498c:	9900      	ldr	r1, [sp, #0]
 800498e:	4605      	mov	r5, r0
 8004990:	4630      	mov	r0, r6
 8004992:	f7ff fa4f 	bl	8003e34 <_malloc_r>
 8004996:	b948      	cbnz	r0, 80049ac <__smakebuf_r+0x44>
 8004998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499c:	059a      	lsls	r2, r3, #22
 800499e:	d4ef      	bmi.n	8004980 <__smakebuf_r+0x18>
 80049a0:	f023 0303 	bic.w	r3, r3, #3
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	e7e3      	b.n	8004974 <__smakebuf_r+0xc>
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <__smakebuf_r+0x7c>)
 80049ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	6020      	str	r0, [r4, #0]
 80049b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	9b00      	ldr	r3, [sp, #0]
 80049bc:	6163      	str	r3, [r4, #20]
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	6120      	str	r0, [r4, #16]
 80049c2:	b15b      	cbz	r3, 80049dc <__smakebuf_r+0x74>
 80049c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f881 	bl	8004ad0 <_isatty_r>
 80049ce:	b128      	cbz	r0, 80049dc <__smakebuf_r+0x74>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	81a3      	strh	r3, [r4, #12]
 80049dc:	89a0      	ldrh	r0, [r4, #12]
 80049de:	4305      	orrs	r5, r0
 80049e0:	81a5      	strh	r5, [r4, #12]
 80049e2:	e7cd      	b.n	8004980 <__smakebuf_r+0x18>
 80049e4:	08003b59 	.word	0x08003b59

080049e8 <__malloc_lock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__malloc_lock+0x8>)
 80049ea:	f7ff b9ac 	b.w	8003d46 <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	20000138 	.word	0x20000138

080049f4 <__malloc_unlock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_unlock+0x8>)
 80049f6:	f7ff b9a7 	b.w	8003d48 <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000138 	.word	0x20000138

08004a00 <_read_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d07      	ldr	r5, [pc, #28]	; (8004a20 <_read_r+0x20>)
 8004a04:	4604      	mov	r4, r0
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fc f86a 	bl	8000ae8 <_read>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_read_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_read_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000144 	.word	0x20000144

08004a24 <_raise_r>:
 8004a24:	291f      	cmp	r1, #31
 8004a26:	b538      	push	{r3, r4, r5, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	460d      	mov	r5, r1
 8004a2c:	d904      	bls.n	8004a38 <_raise_r+0x14>
 8004a2e:	2316      	movs	r3, #22
 8004a30:	6003      	str	r3, [r0, #0]
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a3a:	b112      	cbz	r2, 8004a42 <_raise_r+0x1e>
 8004a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a40:	b94b      	cbnz	r3, 8004a56 <_raise_r+0x32>
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 f830 	bl	8004aa8 <_getpid_r>
 8004a48:	462a      	mov	r2, r5
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a52:	f000 b817 	b.w	8004a84 <_kill_r>
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00a      	beq.n	8004a70 <_raise_r+0x4c>
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	d103      	bne.n	8004a66 <_raise_r+0x42>
 8004a5e:	2316      	movs	r3, #22
 8004a60:	6003      	str	r3, [r0, #0]
 8004a62:	2001      	movs	r0, #1
 8004a64:	e7e7      	b.n	8004a36 <_raise_r+0x12>
 8004a66:	2400      	movs	r4, #0
 8004a68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	4798      	blx	r3
 8004a70:	2000      	movs	r0, #0
 8004a72:	e7e0      	b.n	8004a36 <_raise_r+0x12>

08004a74 <raise>:
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <raise+0xc>)
 8004a76:	4601      	mov	r1, r0
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	f7ff bfd3 	b.w	8004a24 <_raise_r>
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <_kill_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d07      	ldr	r5, [pc, #28]	; (8004aa4 <_kill_r+0x20>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	f7fc f80f 	bl	8000ab4 <_kill>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d102      	bne.n	8004aa0 <_kill_r+0x1c>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	b103      	cbz	r3, 8004aa0 <_kill_r+0x1c>
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000144 	.word	0x20000144

08004aa8 <_getpid_r>:
 8004aa8:	f7fb bffc 	b.w	8000aa4 <_getpid>

08004aac <_fstat_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	; (8004acc <_fstat_r+0x20>)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	f7fc f85a 	bl	8000b72 <_fstat>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	d102      	bne.n	8004ac8 <_fstat_r+0x1c>
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	b103      	cbz	r3, 8004ac8 <_fstat_r+0x1c>
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	bf00      	nop
 8004acc:	20000144 	.word	0x20000144

08004ad0 <_isatty_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d06      	ldr	r5, [pc, #24]	; (8004aec <_isatty_r+0x1c>)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fc f859 	bl	8000b92 <_isatty>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_isatty_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_isatty_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20000144 	.word	0x20000144

08004af0 <_gettimeofday>:
 8004af0:	4b02      	ldr	r3, [pc, #8]	; (8004afc <_gettimeofday+0xc>)
 8004af2:	2258      	movs	r2, #88	; 0x58
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	4770      	bx	lr
 8004afc:	20000144 	.word	0x20000144

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
